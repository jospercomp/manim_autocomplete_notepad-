<?xml version="1.0" encoding="Windows-1252" ?>
	<!--
	@author Gregori Gerebtzoff
	@version 1.2
	-->
<NotepadPlus>
	<AutoComplete language="Python">
		<Environment ignoreCase="no" startFunc="(" stopFunc=")" paramSeparator="," additionalWordChar = "." />
		<KeyWord name="ArithmeticError" func="yes">
			<Overload retVal="" descr="Base class for arithmetic errors.">
			</Overload>
		</KeyWord>
		<KeyWord name="AssertionError" func="yes">
			<Overload retVal="" descr="Assertion failed.">
			</Overload>
		</KeyWord>
		<KeyWord name="AttributeError" func="yes">
			<Overload retVal="" descr="Attribute not found.">
			</Overload>
		</KeyWord>
		<KeyWord name="BaseException" func="yes">
			<Overload retVal="" descr="Common base class for all exceptions">
			</Overload>
		</KeyWord>
		<KeyWord name="BufferError" func="yes">
			<Overload retVal="" descr="Buffer error.">
			</Overload>
		</KeyWord>
		<KeyWord name="BytesWarning" func="yes">
			<Overload retVal="" descr="Base class for warnings about bytes and buffer related problems, mostly&#x0a;related to conversion from str or comparing to str.">
			</Overload>
		</KeyWord>
		<KeyWord name="DeprecationWarning" func="yes">
			<Overload retVal="" descr="Base class for warnings about deprecated features.">
			</Overload>
		</KeyWord>
		<KeyWord name="EOFError" func="yes">
			<Overload retVal="" descr="Read beyond end of file.">
			</Overload>
		</KeyWord>
		<KeyWord name="EnvironmentError" func="yes">
			<Overload retVal="" descr="Base class for I/O related errors.">
			</Overload>
		</KeyWord>
		<KeyWord name="Exception" func="yes">
			<Overload retVal="" descr="Common base class for all non-exit exceptions.">
			</Overload>
		</KeyWord>
		<KeyWord name="False" />
		<KeyWord name="FloatingPointError" func="yes">
			<Overload retVal="" descr="Floating point operation failed.">
			</Overload>
		</KeyWord>
		<KeyWord name="FutureWarning" func="yes">
			<Overload retVal="" descr="Base class for warnings about constructs that will change semantically&#x0a;in the future.">
			</Overload>
		</KeyWord>
		<KeyWord name="GeneratorExit" func="yes">
			<Overload retVal="" descr="Request that a generator exit.">
			</Overload>
		</KeyWord>
		<KeyWord name="IOError" func="yes">
			<Overload retVal="" descr="I/O operation failed.">
			</Overload>
		</KeyWord>
		<KeyWord name="ImportError" func="yes">
			<Overload retVal="" descr="Import can't find module, or can't find name in module.">
			</Overload>
		</KeyWord>
		<KeyWord name="ImportWarning" func="yes">
			<Overload retVal="" descr="Base class for warnings about probable mistakes in module imports">
			</Overload>
		</KeyWord>
		<KeyWord name="IndentationError" func="yes">
			<Overload retVal="" descr="Improper indentation.">
			</Overload>
		</KeyWord>
		<KeyWord name="IndexError" func="yes">
			<Overload retVal="" descr="Sequence index out of range.">
			</Overload>
		</KeyWord>
		<KeyWord name="KeyError" func="yes">
			<Overload retVal="" descr="Mapping key not found.">
			</Overload>
		</KeyWord>
		<KeyWord name="KeyboardInterrupt" func="yes">
			<Overload retVal="" descr="Program interrupted by user.">
			</Overload>
		</KeyWord>
		<KeyWord name="LookupError" func="yes">
			<Overload retVal="" descr="Base class for lookup errors.">
			</Overload>
		</KeyWord>
		<KeyWord name="MemoryError" func="yes">
			<Overload retVal="" descr="Out of memory.">
			</Overload>
		</KeyWord>
		<KeyWord name="NameError" func="yes">
			<Overload retVal="" descr="Name not found globally.">
			</Overload>
		</KeyWord>
		<KeyWord name="None" />
		<KeyWord name="NotImplementedError" func="yes">
			<Overload retVal="" descr="Method or function hasn't been implemented yet.">
			</Overload>
		</KeyWord>
		<KeyWord name="OSError" func="yes">
			<Overload retVal="" descr="OS system call failed.">
			</Overload>
		</KeyWord>
		<KeyWord name="OverflowError" func="yes">
			<Overload retVal="" descr="Result too large to be represented.">
			</Overload>
		</KeyWord>
		<KeyWord name="PendingDeprecationWarning" func="yes">
			<Overload retVal="" descr="Base class for warnings about features which will be deprecated&#x0a;in the future.">
			</Overload>
		</KeyWord>
		<KeyWord name="ReferenceError" func="yes">
			<Overload retVal="" descr="Weak ref proxy used after referent went away.">
			</Overload>
		</KeyWord>
		<KeyWord name="RuntimeError" func="yes">
			<Overload retVal="" descr="Unspecified run-time error.">
			</Overload>
		</KeyWord>
		<KeyWord name="RuntimeWarning" func="yes">
			<Overload retVal="" descr="Base class for warnings about dubious runtime behavior.">
			</Overload>
		</KeyWord>
		<KeyWord name="StandardError" func="yes">
			<Overload retVal="" descr="Base class for all standard Python exceptions that do not represent&#x0a;interpreter exiting.">
			</Overload>
		</KeyWord>
		<KeyWord name="StopIteration" func="yes">
			<Overload retVal="" descr="Signal the end from iterator.next().">
			</Overload>
		</KeyWord>
		<KeyWord name="SyntaxError" func="yes">
			<Overload retVal="" descr="Invalid syntax.">
			</Overload>
		</KeyWord>
		<KeyWord name="SyntaxWarning" func="yes">
			<Overload retVal="" descr="Base class for warnings about dubious syntax.">
			</Overload>
		</KeyWord>
		<KeyWord name="SystemError" func="yes">
			<Overload retVal="" descr="Internal error in the Python interpreter.&#x0a;&#x0a;Please report this to the Python maintainer, along with the traceback,&#x0a;the Python version, and the hardware/OS platform and version.">
			</Overload>
		</KeyWord>
		<KeyWord name="SystemExit" func="yes">
			<Overload retVal="" descr="Request to exit from the interpreter.">
			</Overload>
		</KeyWord>
		<KeyWord name="TabError" func="yes">
			<Overload retVal="" descr="Improper mixture of spaces and tabs.">
			</Overload>
		</KeyWord>
		<KeyWord name="True" />
		<KeyWord name="TypeError" func="yes">
			<Overload retVal="" descr="Inappropriate argument type.">
			</Overload>
		</KeyWord>
		<KeyWord name="UnboundLocalError" func="yes">
			<Overload retVal="" descr="Local name referenced but not bound to a value.">
			</Overload>
		</KeyWord>
		<KeyWord name="UnicodeDecodeError" func="yes">
			<Overload retVal="" descr="Unicode decoding error.">
			</Overload>
		</KeyWord>
		<KeyWord name="UnicodeEncodeError" func="yes">
			<Overload retVal="" descr="Unicode encoding error.">
			</Overload>
		</KeyWord>
		<KeyWord name="UnicodeError" func="yes">
			<Overload retVal="" descr="Unicode related error.">
			</Overload>
		</KeyWord>
		<KeyWord name="UnicodeTranslateError" func="yes">
			<Overload retVal="" descr="Unicode translation error.">
			</Overload>
		</KeyWord>
		<KeyWord name="UnicodeWarning" func="yes">
			<Overload retVal="" descr="Base class for warnings about Unicode related problems, mostly&#x0a;related to conversion problems.">
			</Overload>
		</KeyWord>
		<KeyWord name="UserWarning" func="yes">
			<Overload retVal="" descr="Base class for warnings generated by user code.">
			</Overload>
		</KeyWord>
		<KeyWord name="ValueError" func="yes">
			<Overload retVal="" descr="Inappropriate argument value (of correct type).">
			</Overload>
		</KeyWord>
		<KeyWord name="Warning" func="yes">
			<Overload retVal="" descr="Base class for warning categories.">
			</Overload>
		</KeyWord>
		<KeyWord name="ZeroDivisionError" func="yes">
			<Overload retVal="" descr="Second argument to a division or modulo operation was zero.">
			</Overload>
		</KeyWord>
		<KeyWord name="abs" func="yes">
			<Overload retVal="" descr="abs(number) -&gt; number&#x0a;&#x0a;Return the absolute value of the argument.">
			</Overload>
		</KeyWord>
		<KeyWord name="add" func="yes">
			<Overload retVal="" descr="Add an element to a set.&#x0a;&#x0a;This has no effect if the element is already present.">
			</Overload>
		</KeyWord>
		<KeyWord name="all" func="yes">
			<Overload retVal="" descr="all(iterable) -&gt; bool&#x0a;&#x0a;Return True if bool(x) is True for all values x in the iterable.">
			</Overload>
		</KeyWord>
		<KeyWord name="and" />
		<KeyWord name="any" func="yes">
			<Overload retVal="" descr="any(iterable) -&gt; bool&#x0a;&#x0a;Return True if bool(x) is True for any x in the iterable.">
			</Overload>
		</KeyWord>
		<KeyWord name="append" func="yes">
			<Overload retVal="" descr="B.append(int) -&gt; None&#x0a;&#x0a;Append a single item to the end of B.">
			</Overload>
		</KeyWord>
		<KeyWord name="apply" func="yes">
			<Overload retVal="" descr="apply(object[, args[, kwargs]]) -&gt; value&#x0a;&#x0a;Call a callable object with positional arguments taken from the tuple args,&#x0a;and keyword arguments taken from the optional dictionary kwargs.&#x0a;Note that classes are callable, as are instances with a __call__() method.&#x0a;&#x0a;Deprecated since release 2.3. Instead, use the extended call syntax:&#x0a;    function(*args, **keywords).">
			</Overload>
		</KeyWord>
		<KeyWord name="as" />
		<KeyWord name="as_integer_ratio" func="yes">
			<Overload retVal="" descr="float.as_integer_ratio() -&gt; (int, int)&#x0a;&#x0a;Returns a pair of integers, whose ratio is exactly equal to the original&#x0a;float and with a positive denominator.&#x0a;Raises OverflowError on infinities and a ValueError on NaNs.&#x0a;&#x0a;&gt;&gt;&gt; (10.0).as_integer_ratio()&#x0a;(10, 1)&#x0a;&gt;&gt;&gt; (0.0).as_integer_ratio()&#x0a;(0, 1)&#x0a;&gt;&gt;&gt; (-.25).as_integer_ratio()&#x0a;(-1, 4)">
			</Overload>
		</KeyWord>
		<KeyWord name="assert" />
		<KeyWord name="basestring" func="yes">
			<Overload retVal="" descr="Type basestring cannot be instantiated; it is the base for str and unicode.">
			</Overload>
		</KeyWord>
		<KeyWord name="bin" func="yes">
			<Overload retVal="" descr="bin(number) -&gt; string&#x0a;&#x0a;Return the binary representation of an integer or long integer.">
			</Overload>
		</KeyWord>
		<KeyWord name="bit_length" func="yes">
			<Overload retVal="" descr="long.bit_length() -&gt; int or long&#x0a;&#x0a;Number of bits necessary to represent self in binary.&#x0a;&gt;&gt;&gt; bin(37L)&#x0a;'0b100101'&#x0a;&gt;&gt;&gt; (37L).bit_length()&#x0a;6">
			</Overload>
		</KeyWord>
		<KeyWord name="bool" func="yes">
			<Overload retVal="" descr="bool(x) -&gt; bool&#x0a;&#x0a;Returns True when the argument x is true, False otherwise.&#x0a;The builtins True and False are the only two instances of the class bool.&#x0a;The class bool is a subclass of the class int, and cannot be subclassed.">
			</Overload>
		</KeyWord>
		<KeyWord name="break" />
		<KeyWord name="buffer" func="yes">
			<Overload retVal="" descr="buffer(object [, offset[, size]])&#x0a;&#x0a;Create a new buffer object which references the given object.&#x0a;The buffer will reference a slice of the target object from the&#x0a;start of the object (or at the specified offset). The slice will&#x0a;extend to the end of the target object (or with the specified size).">
			</Overload>
		</KeyWord>
		<KeyWord name="bytearray" func="yes">
			<Overload retVal="" descr="bytearray(iterable_of_ints) -&gt; bytearray.&#x0a;bytearray(string, encoding[, errors]) -&gt; bytearray.&#x0a;bytearray(bytes_or_bytearray) -&gt; mutable copy of bytes_or_bytearray.&#x0a;bytearray(memory_view) -&gt; bytearray.&#x0a;&#x0a;Construct an mutable bytearray object from:&#x0a;  - an iterable yielding integers in range(256)&#x0a;  - a text string encoded using the specified encoding&#x0a;  - a bytes or a bytearray object&#x0a;  - any object implementing the buffer API.&#x0a;&#x0a;bytearray(int) -&gt; bytearray.&#x0a;&#x0a;Construct a zero-initialized bytearray of the given length.">
			</Overload>
		</KeyWord>
		<KeyWord name="bytes" func="yes">
			<Overload retVal="" descr="str(object) -&gt; string&#x0a;&#x0a;Return a nice string representation of the object.&#x0a;If the argument is a string, the return value is the same object.">
			</Overload>
		</KeyWord>
		<KeyWord name="callable" func="yes">
			<Overload retVal="" descr="callable(object) -&gt; bool&#x0a;&#x0a;Return whether the object is callable (i.e., some kind of function).&#x0a;Note that classes are callable, as are instances with a __call__() method.">
			</Overload>
		</KeyWord>
		<KeyWord name="capitalize" func="yes">
			<Overload retVal="" descr="S.capitalize() -&gt; string&#x0a;&#x0a;Return a copy of the string S with only its first character&#x0a;capitalized.">
			</Overload>
		</KeyWord>
		<KeyWord name="center" func="yes">
			<Overload retVal="" descr="B.center(width[, fillchar]) -&gt; copy of B&#x0a;&#x0a;Return B centered in a string of length width.  Padding is&#x0a;done using the specified fill character (default is a space).">
			</Overload>
		</KeyWord>
		<KeyWord name="chr" func="yes">
			<Overload retVal="" descr="chr(i) -&gt; character&#x0a;&#x0a;Return a string of one character with ordinal i; 0 &lt;= i &lt; 256.">
			</Overload>
		</KeyWord>
		<KeyWord name="class" />
		<KeyWord name="classmethod" func="yes">
			<Overload retVal="" descr="classmethod(function) -&gt; method&#x0a;&#x0a;Convert a function to be a class method.&#x0a;&#x0a;A class method receives the class as implicit first argument,&#x0a;just like an instance method receives the instance.&#x0a;To declare a class method, use this idiom:&#x0a;&#x0a;  class C:&#x0a;      def f(cls, arg1, arg2, ...): ...&#x0a;      f = classmethod(f)&#x0a;&#x0a;It can be called either on the class (e.g. C.f()) or on an instance&#x0a;(e.g. C().f()).  The instance is ignored except for its class.&#x0a;If a class method is called for a derived class, the derived class&#x0a;object is passed as the implied first argument.&#x0a;&#x0a;Class methods are different than C++ or Java static methods.&#x0a;If you want those, see the staticmethod builtin.">
			</Overload>
		</KeyWord>
		<KeyWord name="clear" func="yes">
			<Overload retVal="" descr="Remove all elements from this set.">
			</Overload>
		</KeyWord>
		<KeyWord name="close" func="yes">
			<Overload retVal="" descr="close() -&gt; None or (perhaps) an integer.  Close the file.&#x0a;&#x0a;Sets data attribute .closed to True.  A closed file cannot be used for&#x0a;further I/O operations.  close() may be called more than once without&#x0a;error.  Some kinds of file objects (for example, opened by popen())&#x0a;may return an exit status upon closing.">
			</Overload>
		</KeyWord>
		<KeyWord name="cmp" func="yes">
			<Overload retVal="" descr="cmp(x, y) -&gt; integer&#x0a;&#x0a;Return negative if x&lt;y, zero if x==y, positive if x&gt;y.">
			</Overload>
		</KeyWord>
		<KeyWord name="coerce" func="yes">
			<Overload retVal="" descr="coerce(x, y) -&gt; (x1, y1)&#x0a;&#x0a;Return a tuple consisting of the two numeric arguments converted to&#x0a;a common type, using the same rules as used by arithmetic operations.&#x0a;If coercion is not possible, raise TypeError.">
			</Overload>
		</KeyWord>
		<KeyWord name="compile" func="yes">
			<Overload retVal="" descr="compile(source, filename, mode[, flags[, dont_inherit]]) -&gt; code object&#x0a;&#x0a;Compile the source string (a Python module, statement or expression)&#x0a;into a code object that can be executed by the exec statement or eval().&#x0a;The filename will be used for run-time error messages.&#x0a;The mode must be 'exec' to compile a module, 'single' to compile a&#x0a;single (interactive) statement, or 'eval' to compile an expression.&#x0a;The flags argument, if present, controls which future statements influence&#x0a;the compilation of the code.&#x0a;The dont_inherit argument, if non-zero, stops the compilation inheriting&#x0a;the effects of any future statements in effect in the code calling&#x0a;compile; if absent or zero these statements do influence the compilation,&#x0a;in addition to any features explicitly specified.">
			</Overload>
		</KeyWord>
		<KeyWord name="complex" func="yes">
			<Overload retVal="" descr="complex(real[, imag]) -&gt; complex number&#x0a;&#x0a;Create a complex number from a real part and an optional imaginary part.&#x0a;This is equivalent to (real + imag*1j) where imag defaults to 0.">
			</Overload>
		</KeyWord>
		<KeyWord name="conjugate" func="yes">
			<Overload retVal="" descr="Returns self, the complex conjugate of any int.">
			</Overload>
		</KeyWord>
		<KeyWord name="continue" />
		<KeyWord name="copy" func="yes">
			<Overload retVal="" descr="D.copy() -&gt; a shallow copy of D">
			</Overload>
		</KeyWord>
		<KeyWord name="count" func="yes">
			<Overload retVal="" descr="L.count(value) -&gt; integer -- return number of occurrences of value">
			</Overload>
		</KeyWord>
		<KeyWord name="decode" func="yes">
			<Overload retVal="" descr="S.decode([encoding[,errors]]) -&gt; object&#x0a;&#x0a;Decodes S using the codec registered for encoding. encoding defaults&#x0a;to the default encoding. errors may be given to set a different error&#x0a;handling scheme. Default is 'strict' meaning that encoding errors raise&#x0a;a UnicodeDecodeError. Other possible values are 'ignore' and 'replace'&#x0a;as well as any other name registered with codecs.register_error that is&#x0a;able to handle UnicodeDecodeErrors.">
			</Overload>
		</KeyWord>
		<KeyWord name="def" />
		<KeyWord name="del" />
		<KeyWord name="delattr" func="yes">
			<Overload retVal="" descr="delattr(object, name)&#x0a;&#x0a;Delete a named attribute on an object; delattr(x, 'y') is equivalent to&#x0a;``del x.y''.">
			</Overload>
		</KeyWord>
		<KeyWord name="deleter" func="yes">
			<Overload retVal="" descr="Descriptor to change the deleter on a property.">
			</Overload>
		</KeyWord>
		<KeyWord name="dict" func="yes">
			<Overload retVal="" descr="dict() -&gt; new empty dictionary&#x0a;dict(mapping) -&gt; new dictionary initialized from a mapping object's&#x0a;    (key, value) pairs&#x0a;dict(iterable) -&gt; new dictionary initialized as if via:&#x0a;    d = {}&#x0a;    for k, v in iterable:&#x0a;        d[k] = v&#x0a;dict(**kwargs) -&gt; new dictionary initialized with the name=value pairs&#x0a;    in the keyword argument list.  For example:  dict(one=1, two=2)">
			</Overload>
		</KeyWord>
		<KeyWord name="difference" func="yes">
			<Overload retVal="" descr="Return the difference of two or more sets as a new set.&#x0a;&#x0a;(i.e. all elements that are in this set but not the others.)">
			</Overload>
		</KeyWord>
		<KeyWord name="difference_update" func="yes">
			<Overload retVal="" descr="Remove all elements of another set from this set.">
			</Overload>
		</KeyWord>
		<KeyWord name="dir" func="yes">
			<Overload retVal="" descr="dir([object]) -&gt; list of strings&#x0a;&#x0a;If called without an argument, return the names in the current scope.&#x0a;Else, return an alphabetized list of names comprising (some of) the attributes&#x0a;of the given object, and of attributes reachable from it.&#x0a;If the object supplies a method named __dir__, it will be used; otherwise&#x0a;the default dir() logic is used and returns:&#x0a;  for a module object: the module's attributes.&#x0a;  for a class object:  its attributes, and recursively the attributes&#x0a;    of its bases.&#x0a;  for any other object: its attributes, its class's attributes, and&#x0a;    recursively the attributes of its class's base classes.">
			</Overload>
		</KeyWord>
		<KeyWord name="discard" func="yes">
			<Overload retVal="" descr="Remove an element from a set if it is a member.&#x0a;&#x0a;If the element is not a member, do nothing.">
			</Overload>
		</KeyWord>
		<KeyWord name="divmod" func="yes">
			<Overload retVal="" descr="divmod(x, y) -&gt; (div, mod)&#x0a;&#x0a;Return the tuple ((x-x%y)/y, x%y).  Invariant: div*y + mod == x.">
			</Overload>
		</KeyWord>
		<KeyWord name="elif" />
		<KeyWord name="else" />
		<KeyWord name="encode" func="yes">
			<Overload retVal="" descr="S.encode([encoding[,errors]]) -&gt; string or unicode&#x0a;&#x0a;Encodes S using the codec registered for encoding. encoding defaults&#x0a;to the default encoding. errors may be given to set a different error&#x0a;handling scheme. Default is 'strict' meaning that encoding errors raise&#x0a;a UnicodeEncodeError. Other possible values are 'ignore', 'replace' and&#x0a;'xmlcharrefreplace' as well as any other name registered with&#x0a;codecs.register_error that can handle UnicodeEncodeErrors.">
			</Overload>
		</KeyWord>
		<KeyWord name="endswith" func="yes">
			<Overload retVal="" descr="B.endswith(suffix [,start [,end]]) -&gt; bool&#x0a;&#x0a;Return True if B ends with the specified suffix, False otherwise.&#x0a;With optional start, test B beginning at that position.&#x0a;With optional end, stop comparing B at that position.&#x0a;suffix can also be a tuple of strings to try.">
			</Overload>
		</KeyWord>
		<KeyWord name="enumerate" func="yes">
			<Overload retVal="" descr="enumerate(iterable[, start]) -&gt; iterator for index, value of iterable&#x0a;&#x0a;Return an enumerate object.  iterable must be another object that supports&#x0a;iteration.  The enumerate object yields pairs containing a count (from&#x0a;start, which defaults to zero) and a value yielded by the iterable argument.&#x0a;enumerate is useful for obtaining an indexed list:&#x0a;    (0, seq[0]), (1, seq[1]), (2, seq[2]), ...">
			</Overload>
		</KeyWord>
		<KeyWord name="eval" func="yes">
			<Overload retVal="" descr="eval(source[, globals[, locals]]) -&gt; value&#x0a;&#x0a;Evaluate the source in the context of globals and locals.&#x0a;The source may be a string representing a Python expression&#x0a;or a code object as returned by compile().&#x0a;The globals must be a dictionary and locals can be any mapping,&#x0a;defaulting to the current globals and locals.&#x0a;If only globals is given, locals defaults to it.">
			</Overload>
		</KeyWord>
		<KeyWord name="except" />
		<KeyWord name="exec" />
		<KeyWord name="execfile" func="yes">
			<Overload retVal="" descr="execfile(filename[, globals[, locals]])&#x0a;&#x0a;Read and execute a Python script from a file.&#x0a;The globals and locals are dictionaries, defaulting to the current&#x0a;globals and locals.  If only globals is given, locals defaults to it.">
			</Overload>
		</KeyWord>
		<KeyWord name="expandtabs" func="yes">
			<Overload retVal="" descr="B.expandtabs([tabsize]) -&gt; copy of B&#x0a;&#x0a;Return a copy of B where all tab characters are expanded using spaces.&#x0a;If tabsize is not given, a tab size of 8 characters is assumed.">
			</Overload>
		</KeyWord>
		<KeyWord name="extend" func="yes">
			<Overload retVal="" descr="B.extend(iterable int) -&gt; None&#x0a;&#x0a;Append all the elements from the iterator or sequence to the&#x0a;end of B.">
			</Overload>
		</KeyWord>
		<KeyWord name="file" func="yes">
			<Overload retVal="" descr="file(name[, mode[, buffering]]) -&gt; file object&#x0a;&#x0a;Open a file.  The mode can be 'r', 'w' or 'a' for reading (default),&#x0a;writing or appending.  The file will be created if it doesn't exist&#x0a;when opened for writing or appending; it will be truncated when&#x0a;opened for writing.  Add a 'b' to the mode for binary files.&#x0a;Add a '+' to the mode to allow simultaneous reading and writing.&#x0a;If the buffering argument is given, 0 means unbuffered, 1 means line&#x0a;buffered, and larger numbers specify the buffer size.  The preferred way&#x0a;to open a file is with the builtin open() function.&#x0a;Add a 'U' to mode to open the file for input with universal newline&#x0a;support.  Any line ending in the input file will be seen as a '\n'&#x0a;in Python.  Also, a file so opened gains the attribute 'newlines';&#x0a;the value for this attribute is one of None (no newline read yet),&#x0a;'\r', '\n', '\r\n' or a tuple containing all the newline types seen.&#x0a;&#x0a;'U' cannot be combined with 'w' or '+' mode.">
			</Overload>
		</KeyWord>
		<KeyWord name="fileno" func="yes">
			<Overload retVal="" descr='fileno() -&gt; integer "file descriptor".&#x0a;&#x0a;This is needed for lower-level file interfaces, such os.read().'>
			</Overload>
		</KeyWord>
		<KeyWord name="filter" func="yes">
			<Overload retVal="" descr="filter(function or None, sequence) -&gt; list, tuple, or string&#x0a;&#x0a;Return those items of sequence for which function(item) is true.  If&#x0a;function is None, return the items that are true.  If sequence is a tuple&#x0a;or string, return the same type, else return a list.">
			</Overload>
		</KeyWord>
		<KeyWord name="finally" />
		<KeyWord name="find" func="yes">
			<Overload retVal="" descr="S.find(sub [,start [,end]]) -&gt; int&#x0a;&#x0a;Return the lowest index in S where substring sub is found,&#x0a;such that sub is contained within s[start:end].  Optional&#x0a;arguments start and end are interpreted as in slice notation.&#x0a;&#x0a;Return -1 on failure.">
			</Overload>
		</KeyWord>
		<KeyWord name="float" func="yes">
			<Overload retVal="" descr="float(x) -&gt; floating point number&#x0a;&#x0a;Convert a string or number to a floating point number, if possible.">
			</Overload>
		</KeyWord>
		<KeyWord name="flush" func="yes">
			<Overload retVal="" descr="flush() -&gt; None.  Flush the internal I/O buffer.">
			</Overload>
		</KeyWord>
		<KeyWord name="for" />
		<KeyWord name="format" func="yes">
			<Overload retVal="" descr="S.format(*args, **kwargs) -&gt; unicode">
			</Overload>
		</KeyWord>
		<KeyWord name="from" />
		<KeyWord name="fromhex" func="yes">
			<Overload retVal="" descr="float.fromhex(string) -&gt; float&#x0a;&#x0a;Create a floating-point number from a hexadecimal string.&#x0a;&gt;&gt;&gt; float.fromhex('0x1.ffffp10')&#x0a;2047.984375&#x0a;&gt;&gt;&gt; float.fromhex('-0x1p-1074')&#x0a;-4.9406564584124654e-324">
			</Overload>
		</KeyWord>
		<KeyWord name="fromkeys" func="yes">
			<Overload retVal="" descr="dict.fromkeys(S[,v]) -&gt; New dict with keys from S and values equal to v.&#x0a;v defaults to None.">
			</Overload>
		</KeyWord>
		<KeyWord name="frozenset" func="yes">
			<Overload retVal="" descr="frozenset() -&gt; empty frozenset object&#x0a;frozenset(iterable) -&gt; frozenset object&#x0a;&#x0a;Build an immutable unordered collection of unique elements.">
			</Overload>
		</KeyWord>
		<KeyWord name="get" func="yes">
			<Overload retVal="" descr="D.get(k[,d]) -&gt; D[k] if k in D, else d.  d defaults to None.">
			</Overload>
		</KeyWord>
		<KeyWord name="getattr" func="yes">
			<Overload retVal="" descr="getattr(object, name[, default]) -&gt; value&#x0a;&#x0a;Get a named attribute from an object; getattr(x, 'y') is equivalent to x.y.&#x0a;When a default argument is given, it is returned when the attribute doesn't&#x0a;exist; without it, an exception is raised in that case.">
			</Overload>
		</KeyWord>
		<KeyWord name="getter" func="yes">
			<Overload retVal="" descr="Descriptor to change the getter on a property.">
			</Overload>
		</KeyWord>
		<KeyWord name="global" />
		<KeyWord name="globals" func="yes">
			<Overload retVal="" descr="globals() -&gt; dictionary&#x0a;&#x0a;Return the dictionary containing the current scope's global variables.">
			</Overload>
		</KeyWord>
		<KeyWord name="has_key" func="yes">
			<Overload retVal="" descr="D.has_key(k) -&gt; True if D has a key k, else False">
			</Overload>
		</KeyWord>
		<KeyWord name="hasattr" func="yes">
			<Overload retVal="" descr="hasattr(object, name) -&gt; bool&#x0a;&#x0a;Return whether the object has an attribute with the given name.&#x0a;(This is done by calling getattr(object, name) and catching exceptions.)">
			</Overload>
		</KeyWord>
		<KeyWord name="hash" func="yes">
			<Overload retVal="" descr="hash(object) -&gt; integer&#x0a;&#x0a;Return a hash value for the object.  Two objects with the same value have&#x0a;the same hash value.  The reverse is not necessarily true, but likely.">
			</Overload>
		</KeyWord>
		<KeyWord name="hex" func="yes">
			<Overload retVal="" descr="float.hex() -&gt; string&#x0a;&#x0a;Return a hexadecimal representation of a floating-point number.&#x0a;&gt;&gt;&gt; (-0.1).hex()&#x0a;'-0x1.999999999999ap-4'&#x0a;&gt;&gt;&gt; 3.14159.hex()&#x0a;'0x1.921f9f01b866ep+1'">
			</Overload>
		</KeyWord>
		<KeyWord name="id" func="yes">
			<Overload retVal="" descr="id(object) -&gt; integer&#x0a;&#x0a;Return the identity of an object.  This is guaranteed to be unique among&#x0a;simultaneously existing objects.  (Hint: it's the object's memory address.)">
			</Overload>
		</KeyWord>
		<KeyWord name="if" />
		<KeyWord name="import" />
		<KeyWord name="in" />
		<KeyWord name="index" func="yes">
			<Overload retVal="" descr="S.index(sub [,start [,end]]) -&gt; int&#x0a;&#x0a;Like S.find() but raise ValueError when the substring is not found.">
			</Overload>
		</KeyWord>
		<KeyWord name="indices" func="yes">
			<Overload retVal="" descr="S.indices(len) -&gt; (start, stop, stride)&#x0a;&#x0a;Assuming a sequence of length len, calculate the start and stop&#x0a;indices, and the stride length of the extended slice described by&#x0a;S. Out of bounds indices are clipped in a manner consistent with the&#x0a;handling of normal slices.">
			</Overload>
		</KeyWord>
		<KeyWord name="input" func="yes">
			<Overload retVal="" descr="input([prompt]) -&gt; value&#x0a;&#x0a;Equivalent to eval(raw_input(prompt)).">
			</Overload>
		</KeyWord>
		<KeyWord name="insert" func="yes">
			<Overload retVal="" descr="B.insert(index, int) -&gt; None&#x0a;&#x0a;Insert a single item into the bytearray before the given index.">
			</Overload>
		</KeyWord>
		<KeyWord name="int" func="yes">
			<Overload retVal="" descr="int(x[, base]) -&gt; integer&#x0a;&#x0a;Convert a string or number to an integer, if possible.  A floating point&#x0a;argument will be truncated towards zero (this does not include a string&#x0a;representation of a floating point number!)  When converting a string, use&#x0a;the optional base.  It is an error to supply a base when converting a&#x0a;non-string.  If base is zero, the proper base is guessed based on the&#x0a;string content.  If the argument is outside the integer range a&#x0a;long object will be returned instead.">
			</Overload>
		</KeyWord>
		<KeyWord name="intern" func="yes">
			<Overload retVal="" descr="intern(string) -&gt; string&#x0a;&#x0a;``Intern'' the given string.  This enters the string in the (global)&#x0a;table of interned strings whose purpose is to speed up dictionary lookups.&#x0a;Return the string itself or the previously interned string object with the&#x0a;same value.">
			</Overload>
		</KeyWord>
		<KeyWord name="intersection" func="yes">
			<Overload retVal="" descr="Return the intersection of two or more sets as a new set.&#x0a;&#x0a;(i.e. elements that are common to all of the sets.)">
			</Overload>
		</KeyWord>
		<KeyWord name="intersection_update" func="yes">
			<Overload retVal="" descr="Update a set with the intersection of itself and another.">
			</Overload>
		</KeyWord>
		<KeyWord name="is" />
		<KeyWord name="is_integer" func="yes">
			<Overload retVal="" descr="Returns True if the float is an integer.">
			</Overload>
		</KeyWord>
		<KeyWord name="isalnum" func="yes">
			<Overload retVal="" descr="S.isalnum() -&gt; bool&#x0a;&#x0a;Return True if all characters in S are alphanumeric&#x0a;and there is at least one character in S, False otherwise.">
			</Overload>
		</KeyWord>
		<KeyWord name="isalpha" func="yes">
			<Overload retVal="" descr="S.isalpha() -&gt; bool&#x0a;&#x0a;Return True if all characters in S are alphabetic&#x0a;and there is at least one character in S, False otherwise.">
			</Overload>
		</KeyWord>
		<KeyWord name="isatty" func="yes">
			<Overload retVal="" descr="isatty() -&gt; true or false.  True if the file is connected to a tty device.">
			</Overload>
		</KeyWord>
		<KeyWord name="isdecimal" func="yes">
			<Overload retVal="" descr="S.isdecimal() -&gt; bool&#x0a;&#x0a;Return True if there are only decimal characters in S,&#x0a;False otherwise.">
			</Overload>
		</KeyWord>
		<KeyWord name="isdigit" func="yes">
			<Overload retVal="" descr="S.isdigit() -&gt; bool&#x0a;&#x0a;Return True if all characters in S are digits&#x0a;and there is at least one character in S, False otherwise.">
			</Overload>
		</KeyWord>
		<KeyWord name="isdisjoint" func="yes">
			<Overload retVal="" descr="Return True if two sets have a null intersection.">
			</Overload>
		</KeyWord>
		<KeyWord name="isinstance" func="yes">
			<Overload retVal="" descr="isinstance(object, class-or-type-or-tuple) -&gt; bool&#x0a;&#x0a;Return whether an object is an instance of a class or of a subclass thereof.&#x0a;With a type as second argument, return whether that is the object's type.&#x0a;The form using a tuple, isinstance(x, (A, B, ...)), is a shortcut for&#x0a;isinstance(x, A) or isinstance(x, B) or ... (etc.).">
			</Overload>
		</KeyWord>
		<KeyWord name="islower" func="yes">
			<Overload retVal="" descr="S.islower() -&gt; bool&#x0a;&#x0a;Return True if all cased characters in S are lowercase and there is&#x0a;at least one cased character in S, False otherwise.">
			</Overload>
		</KeyWord>
		<KeyWord name="isnumeric" func="yes">
			<Overload retVal="" descr="S.isnumeric() -&gt; bool&#x0a;&#x0a;Return True if there are only numeric characters in S,&#x0a;False otherwise.">
			</Overload>
		</KeyWord>
		<KeyWord name="isspace" func="yes">
			<Overload retVal="" descr="S.isspace() -&gt; bool&#x0a;&#x0a;Return True if all characters in S are whitespace&#x0a;and there is at least one character in S, False otherwise.">
			</Overload>
		</KeyWord>
		<KeyWord name="issubclass" func="yes">
			<Overload retVal="" descr="issubclass(C, B) -&gt; bool&#x0a;&#x0a;Return whether class C is a subclass (i.e., a derived class) of class B.&#x0a;When using a tuple as the second argument issubclass(X, (A, B, ...)),&#x0a;is a shortcut for issubclass(X, A) or issubclass(X, B) or ... (etc.).">
			</Overload>
		</KeyWord>
		<KeyWord name="issubset" func="yes">
			<Overload retVal="" descr="Report whether another set contains this set.">
			</Overload>
		</KeyWord>
		<KeyWord name="issuperset" func="yes">
			<Overload retVal="" descr="Report whether this set contains another set.">
			</Overload>
		</KeyWord>
		<KeyWord name="istitle" func="yes">
			<Overload retVal="" descr="S.istitle() -&gt; bool&#x0a;&#x0a;Return True if S is a titlecased string and there is at least one&#x0a;character in S, i.e. uppercase characters may only follow uncased&#x0a;characters and lowercase characters only cased ones. Return False&#x0a;otherwise.">
			</Overload>
		</KeyWord>
		<KeyWord name="isupper" func="yes">
			<Overload retVal="" descr="S.isupper() -&gt; bool&#x0a;&#x0a;Return True if all cased characters in S are uppercase and there is&#x0a;at least one cased character in S, False otherwise.">
			</Overload>
		</KeyWord>
		<KeyWord name="items" func="yes">
			<Overload retVal="" descr="D.items() -&gt; list of D's (key, value) pairs, as 2-tuples">
			</Overload>
		</KeyWord>
		<KeyWord name="iter" func="yes">
			<Overload retVal="" descr="iter(collection) -&gt; iterator&#x0a;iter(callable, sentinel) -&gt; iterator&#x0a;&#x0a;Get an iterator from an object.  In the first form, the argument must&#x0a;supply its own iterator, or be a sequence.&#x0a;In the second form, the callable is called until it returns the sentinel.">
			</Overload>
		</KeyWord>
		<KeyWord name="iteritems" func="yes">
			<Overload retVal="" descr="D.iteritems() -&gt; an iterator over the (key, value) items of D">
			</Overload>
		</KeyWord>
		<KeyWord name="iterkeys" func="yes">
			<Overload retVal="" descr="D.iterkeys() -&gt; an iterator over the keys of D">
			</Overload>
		</KeyWord>
		<KeyWord name="itervalues" func="yes">
			<Overload retVal="" descr="D.itervalues() -&gt; an iterator over the values of D">
			</Overload>
		</KeyWord>
		<KeyWord name="join" func="yes">
			<Overload retVal="" descr="S.join(iterable) -&gt; unicode&#x0a;&#x0a;Return a string which is the concatenation of the strings in the&#x0a;iterable.  The separator between elements is S.">
			</Overload>
		</KeyWord>
		<KeyWord name="keys" func="yes">
			<Overload retVal="" descr="D.keys() -&gt; list of D's keys">
			</Overload>
		</KeyWord>
		<KeyWord name="lambda" />
		<KeyWord name="len" func="yes">
			<Overload retVal="" descr="len(object) -&gt; integer&#x0a;&#x0a;Return the number of items of a sequence or mapping.">
			</Overload>
		</KeyWord>
		<KeyWord name="list" func="yes">
			<Overload retVal="" descr="list() -&gt; new empty list&#x0a;list(iterable) -&gt; new list initialized from iterable's items">
			</Overload>
		</KeyWord>
		<KeyWord name="ljust" func="yes">
			<Overload retVal="" descr="S.ljust(width[, fillchar]) -&gt; string&#x0a;&#x0a;Return S left-justified in a string of length width. Padding is&#x0a;done using the specified fill character (default is a space).">
			</Overload>
		</KeyWord>
		<KeyWord name="locals" func="yes">
			<Overload retVal="" descr="locals() -&gt; dictionary&#x0a;&#x0a;Update and return a dictionary containing the current scope's local variables.">
			</Overload>
		</KeyWord>
		<KeyWord name="long" func="yes">
			<Overload retVal="" descr="long(x[, base]) -&gt; integer&#x0a;&#x0a;Convert a string or number to a long integer, if possible.  A floating&#x0a;point argument will be truncated towards zero (this does not include a&#x0a;string representation of a floating point number!)  When converting a&#x0a;string, use the optional base.  It is an error to supply a base when&#x0a;converting a non-string.">
			</Overload>
		</KeyWord>
		<KeyWord name="lower" func="yes">
			<Overload retVal="" descr="S.lower() -&gt; string&#x0a;&#x0a;Return a copy of the string S converted to lowercase.">
			</Overload>
		</KeyWord>
		<KeyWord name="lstrip" func="yes">
			<Overload retVal="" descr="S.lstrip([chars]) -&gt; string or unicode&#x0a;&#x0a;Return a copy of the string S with leading whitespace removed.&#x0a;If chars is given and not None, remove characters in chars instead.&#x0a;If chars is unicode, S will be converted to unicode before stripping">
			</Overload>
		</KeyWord>
		<KeyWord name="map" func="yes">
			<Overload retVal="" descr="map(function, sequence[, sequence, ...]) -&gt; list&#x0a;&#x0a;Return a list of the results of applying the function to the items of&#x0a;the argument sequence(s).  If more than one sequence is given, the&#x0a;function is called with an argument list consisting of the corresponding&#x0a;item of each sequence, substituting None for missing values when not all&#x0a;sequences have the same length.  If the function is None, return a list of&#x0a;the items of the sequence (or a list of tuples if more than one sequence).">
			</Overload>
		</KeyWord>
		<KeyWord name="max" func="yes">
			<Overload retVal="" descr="max(iterable[, key=func]) -&gt; value&#x0a;max(a, b, c, ...[, key=func]) -&gt; value&#x0a;&#x0a;With a single iterable argument, return its largest item.&#x0a;With two or more arguments, return the largest argument.">
			</Overload>
		</KeyWord>
		<KeyWord name="memoryview" func="yes">
			<Overload retVal="" descr="memoryview(object)&#x0a;&#x0a;Create a new memoryview object which references the given object.">
			</Overload>
		</KeyWord>
		<KeyWord name="min" func="yes">
			<Overload retVal="" descr="min(iterable[, key=func]) -&gt; value&#x0a;min(a, b, c, ...[, key=func]) -&gt; value&#x0a;&#x0a;With a single iterable argument, return its smallest item.&#x0a;With two or more arguments, return the smallest argument.">
			</Overload>
		</KeyWord>
		<KeyWord name="mro" func="yes">
			<Overload retVal="" descr="mro() -&gt; list&#x0a;return a type's method resolution order">
			</Overload>
		</KeyWord>
		<KeyWord name="next" func="yes">
			<Overload retVal="" descr="x.next() -&gt; the next value, or raise StopIteration">
			</Overload>
		</KeyWord>
		<KeyWord name="not" />
		<KeyWord name="object" func="yes">
			<Overload retVal="" descr="The most base type">
			</Overload>
		</KeyWord>
		<KeyWord name="oct" func="yes">
			<Overload retVal="" descr="oct(number) -&gt; string&#x0a;&#x0a;Return the octal representation of an integer or long integer.">
			</Overload>
		</KeyWord>
		<KeyWord name="open" func="yes">
			<Overload retVal="" descr="open(name[, mode[, buffering]]) -&gt; file object&#x0a;&#x0a;Open a file using the file() type, returns a file object.  This is the&#x0a;preferred way to open a file.  See file.__doc__ for further information.">
			</Overload>
		</KeyWord>
		<KeyWord name="or" />
		<KeyWord name="ord" func="yes">
			<Overload retVal="" descr="ord(c) -&gt; integer&#x0a;&#x0a;Return the integer ordinal of a one-character string.">
			</Overload>
		</KeyWord>
		<KeyWord name="partition" func="yes">
			<Overload retVal="" descr="S.partition(sep) -&gt; (head, sep, tail)&#x0a;&#x0a;Search for the separator sep in S, and return the part before it,&#x0a;the separator itself, and the part after it.  If the separator is not&#x0a;found, return S and two empty strings.">
			</Overload>
		</KeyWord>
		<KeyWord name="pass" />
		<KeyWord name="pop" func="yes">
			<Overload retVal="" descr="L.pop([index]) -&gt; item -- remove and return item at index (default last).&#x0a;Raises IndexError if list is empty or index is out of range.">
			</Overload>
		</KeyWord>
		<KeyWord name="popitem" func="yes">
			<Overload retVal="" descr="D.popitem() -&gt; (k, v), remove and return some (key, value) pair as a&#x0a;2-tuple; but raise KeyError if D is empty.">
			</Overload>
		</KeyWord>
		<KeyWord name="pow" func="yes">
			<Overload retVal="" descr="pow(x, y[, z]) -&gt; number&#x0a;&#x0a;With two arguments, equivalent to x**y.  With three arguments,&#x0a;equivalent to (x**y) % z, but may be more efficient (e.g. for longs).">
			</Overload>
		</KeyWord>
		<KeyWord name="print" />
		<KeyWord name="property" func="yes">
			<Overload retVal="" descr="property(fget=None, fset=None, fdel=None, doc=None) -&gt; property attribute&#x0a;&#x0a;fget is a function to be used for getting an attribute value, and likewise&#x0a;fset is a function for setting, and fdel a function for del'ing, an&#x0a;attribute.  Typical use is to define a managed attribute x:&#x0a;class C(object):&#x0a;    def getx(self): return self._x&#x0a;    def setx(self, value): self._x = value&#x0a;    def delx(self): del self._x&#x0a;    x = property(getx, setx, delx, &quot;I'm the 'x' property.&quot;)&#x0a;&#x0a;Decorators make defining new properties or modifying existing ones easy:&#x0a;class C(object):&#x0a;    @property&#x0a;    def x(self): return self._x&#x0a;    @x.setter&#x0a;    def x(self, value): self._x = value&#x0a;    @x.deleter&#x0a;    def x(self): del self._x">
			</Overload>
		</KeyWord>
		<KeyWord name="raise" />
		<KeyWord name="range" func="yes">
			<Overload retVal="" descr="range([start,] stop[, step]) -&gt; list of integers&#x0a;&#x0a;Return a list containing an arithmetic progression of integers.&#x0a;range(i, j) returns [i, i+1, i+2, ..., j-1]; start (!) defaults to 0.&#x0a;When step is given, it specifies the increment (or decrement).&#x0a;For example, range(4) returns [0, 1, 2, 3].  The end point is omitted!&#x0a;These are exactly the valid indices for a list of 4 elements.">
			</Overload>
		</KeyWord>
		<KeyWord name="raw_input" func="yes">
			<Overload retVal="" descr="raw_input([prompt]) -&gt; string&#x0a;&#x0a;Read a string from standard input.  The trailing newline is stripped.&#x0a;If the user hits EOF (Unix: Ctl-D, Windows: Ctl-Z+Return), raise EOFError.&#x0a;On Unix, GNU readline is used if enabled.  The prompt string, if given,&#x0a;is printed without a trailing newline before reading.">
			</Overload>
		</KeyWord>
		<KeyWord name="read" func="yes">
			<Overload retVal="" descr="read([size]) -&gt; read at most size bytes, returned as a string.&#x0a;&#x0a;If the size argument is negative or omitted, read until EOF is reached.&#x0a;Notice that when in non-blocking mode, less data than what was requested&#x0a;may be returned, even if no size parameter was given.">
			</Overload>
		</KeyWord>
		<KeyWord name="readinto" func="yes">
			<Overload retVal="" descr="readinto() -&gt; Undocumented.  Don't use this; it may go away.">
			</Overload>
		</KeyWord>
		<KeyWord name="readline" func="yes">
			<Overload retVal="" descr="readline([size]) -&gt; next line from the file, as a string.&#x0a;&#x0a;Retain newline.  A non-negative size argument limits the maximum&#x0a;number of bytes to return (an incomplete line may be returned then).&#x0a;Return an empty string at EOF.">
			</Overload>
		</KeyWord>
		<KeyWord name="readlines" func="yes">
			<Overload retVal="" descr="readlines([size]) -&gt; list of strings, each a line from the file.&#x0a;&#x0a;Call readline() repeatedly and return a list of the lines so read.&#x0a;The optional size argument, if given, is an approximate bound on the&#x0a;total number of bytes in the lines returned.">
			</Overload>
		</KeyWord>
		<KeyWord name="reduce" func="yes">
			<Overload retVal="" descr="reduce(function, sequence[, initial]) -&gt; value&#x0a;&#x0a;Apply a function of two arguments cumulatively to the items of a sequence,&#x0a;from left to right, so as to reduce the sequence to a single value.&#x0a;For example, reduce(lambda x, y: x+y, [1, 2, 3, 4, 5]) calculates&#x0a;((((1+2)+3)+4)+5).  If initial is present, it is placed before the items&#x0a;of the sequence in the calculation, and serves as a default when the&#x0a;sequence is empty.">
			</Overload>
		</KeyWord>
		<KeyWord name="reload" func="yes">
			<Overload retVal="" descr="reload(module) -&gt; module&#x0a;&#x0a;Reload the module.  The module must have been successfully imported before.">
			</Overload>
		</KeyWord>
		<KeyWord name="remove" func="yes">
			<Overload retVal="" descr="Remove an element from a set; it must be a member.&#x0a;&#x0a;If the element is not a member, raise a KeyError.">
			</Overload>
		</KeyWord>
		<KeyWord name="replace" func="yes">
			<Overload retVal="" descr="B.replace(old, new[, count]) -&gt; bytes&#x0a;&#x0a;Return a copy of B with all occurrences of subsection&#x0a;old replaced by new.  If the optional argument count is&#x0a;given, only the first count occurrences are replaced.">
			</Overload>
		</KeyWord>
		<KeyWord name="repr" func="yes">
			<Overload retVal="" descr="repr(object) -&gt; string&#x0a;&#x0a;Return the canonical string representation of the object.&#x0a;For most object types, eval(repr(object)) == object.">
			</Overload>
		</KeyWord>
		<KeyWord name="return" />
		<KeyWord name="reverse" func="yes">
			<Overload retVal="" descr="L.reverse() -- reverse *IN PLACE*">
			</Overload>
		</KeyWord>
		<KeyWord name="reversed" func="yes">
			<Overload retVal="" descr="reversed(sequence) -&gt; reverse iterator over values of the sequence&#x0a;&#x0a;Return a reverse iterator">
			</Overload>
		</KeyWord>
		<KeyWord name="rfind" func="yes">
			<Overload retVal="" descr="B.rfind(sub [,start [,end]]) -&gt; int&#x0a;&#x0a;Return the highest index in B where subsection sub is found,&#x0a;such that sub is contained within s[start,end].  Optional&#x0a;arguments start and end are interpreted as in slice notation.&#x0a;&#x0a;Return -1 on failure.">
			</Overload>
		</KeyWord>
		<KeyWord name="rindex" func="yes">
			<Overload retVal="" descr="S.rindex(sub [,start [,end]]) -&gt; int&#x0a;&#x0a;Like S.rfind() but raise ValueError when the substring is not found.">
			</Overload>
		</KeyWord>
		<KeyWord name="rjust" func="yes">
			<Overload retVal="" descr="B.rjust(width[, fillchar]) -&gt; copy of B&#x0a;&#x0a;Return B right justified in a string of length width. Padding is&#x0a;done using the specified fill character (default is a space)">
			</Overload>
		</KeyWord>
		<KeyWord name="round" func="yes">
			<Overload retVal="" descr="round(number[, ndigits]) -&gt; floating point number&#x0a;&#x0a;Round a number to a given precision in decimal digits (default 0 digits).&#x0a;This always returns a floating point number.  Precision may be negative.">
			</Overload>
		</KeyWord>
		<KeyWord name="rpartition" func="yes">
			<Overload retVal="" descr="B.rpartition(sep) -&gt; (head, sep, tail)&#x0a;&#x0a;Searches for the separator sep in B, starting at the end of B,&#x0a;and returns the part before it, the separator itself, and the&#x0a;part after it.  If the separator is not found, returns two empty&#x0a;bytearray objects and B.">
			</Overload>
		</KeyWord>
		<KeyWord name="rsplit" func="yes">
			<Overload retVal="" descr="S.rsplit([sep [,maxsplit]]) -&gt; list of strings&#x0a;&#x0a;Return a list of the words in the string S, using sep as the&#x0a;delimiter string, starting at the end of the string and working&#x0a;to the front.  If maxsplit is given, at most maxsplit splits are&#x0a;done. If sep is not specified or is None, any whitespace string&#x0a;is a separator.">
			</Overload>
		</KeyWord>
		<KeyWord name="rstrip" func="yes">
			<Overload retVal="" descr="S.rstrip([chars]) -&gt; string or unicode&#x0a;&#x0a;Return a copy of the string S with trailing whitespace removed.&#x0a;If chars is given and not None, remove characters in chars instead.&#x0a;If chars is unicode, S will be converted to unicode before stripping">
			</Overload>
		</KeyWord>
		<KeyWord name="seek" func="yes">
			<Overload retVal="" descr="seek(offset[, whence]) -&gt; None.  Move to new file position.&#x0a;&#x0a;Argument offset is a byte count.  Optional argument whence defaults to&#x0a;0 (offset from start of file, offset should be &gt;= 0); other values are 1&#x0a;(move relative to current position, positive or negative), and 2 (move&#x0a;relative to end of file, usually negative, although many platforms allow&#x0a;seeking beyond the end of a file).  If the file is opened in text mode,&#x0a;only offsets returned by tell() are legal.  Use of other offsets causes&#x0a;undefined behavior.&#x0a;Note that not all file objects are seekable.">
			</Overload>
		</KeyWord>
		<KeyWord name="set" func="yes">
			<Overload retVal="" descr="set() -&gt; new empty set object&#x0a;set(iterable) -&gt; new set object&#x0a;&#x0a;Build an unordered collection of unique elements.">
			</Overload>
		</KeyWord>
		<KeyWord name="setattr" func="yes">
			<Overload retVal="" descr="setattr(object, name, value)&#x0a;&#x0a;Set a named attribute on an object; setattr(x, 'y', v) is equivalent to&#x0a;``x.y = v''.">
			</Overload>
		</KeyWord>
		<KeyWord name="setdefault" func="yes">
			<Overload retVal="" descr="D.setdefault(k[,d]) -&gt; D.get(k,d), also set D[k]=d if k not in D">
			</Overload>
		</KeyWord>
		<KeyWord name="setter" func="yes">
			<Overload retVal="" descr="Descriptor to change the setter on a property.">
			</Overload>
		</KeyWord>
		<KeyWord name="slice" func="yes">
			<Overload retVal="" descr="slice([start,] stop[, step])&#x0a;&#x0a;Create a slice object.  This is used for extended slicing (e.g. a[0:10:2]).">
			</Overload>
		</KeyWord>
		<KeyWord name="sort" func="yes">
			<Overload retVal="" descr="L.sort(cmp=None, key=None, reverse=False) -- stable sort *IN PLACE*;&#x0a;cmp(x, y) -&gt; -1, 0, 1">
			</Overload>
		</KeyWord>
		<KeyWord name="sorted" func="yes">
			<Overload retVal="" descr="sorted(iterable, cmp=None, key=None, reverse=False) --&gt; new sorted list">
			</Overload>
		</KeyWord>
		<KeyWord name="split" func="yes">
			<Overload retVal="" descr="B.split([sep[, maxsplit]]) -&gt; list of bytearray&#x0a;&#x0a;Return a list of the sections in B, using sep as the delimiter.&#x0a;If sep is not given, B is split on ASCII whitespace characters&#x0a;(space, tab, return, newline, formfeed, vertical tab).&#x0a;If maxsplit is given, at most maxsplit splits are done.">
			</Overload>
		</KeyWord>
		<KeyWord name="splitlines" func="yes">
			<Overload retVal="" descr="S.splitlines([keepends]) -&gt; list of strings&#x0a;&#x0a;Return a list of the lines in S, breaking at line boundaries.&#x0a;Line breaks are not included in the resulting list unless keepends&#x0a;is given and true.">
			</Overload>
		</KeyWord>
		<KeyWord name="startswith" func="yes">
			<Overload retVal="" descr="S.startswith(prefix[, start[, end]]) -&gt; bool&#x0a;&#x0a;Return True if S starts with the specified prefix, False otherwise.&#x0a;With optional start, test S beginning at that position.&#x0a;With optional end, stop comparing S at that position.&#x0a;prefix can also be a tuple of strings to try.">
			</Overload>
		</KeyWord>
		<KeyWord name="staticmethod" func="yes">
			<Overload retVal="" descr="staticmethod(function) -&gt; method&#x0a;&#x0a;Convert a function to be a static method.&#x0a;&#x0a;A static method does not receive an implicit first argument.&#x0a;To declare a static method, use this idiom:&#x0a;&#x0a;     class C:&#x0a;     def f(arg1, arg2, ...): ...&#x0a;     f = staticmethod(f)&#x0a;&#x0a;It can be called either on the class (e.g. C.f()) or on an instance&#x0a;(e.g. C().f()).  The instance is ignored except for its class.&#x0a;&#x0a;Static methods in Python are similar to those found in Java or C++.&#x0a;For a more advanced concept, see the classmethod builtin.">
			</Overload>
		</KeyWord>
		<KeyWord name="str" func="yes">
			<Overload retVal="" descr="str(object) -&gt; string&#x0a;&#x0a;Return a nice string representation of the object.&#x0a;If the argument is a string, the return value is the same object.">
			</Overload>
		</KeyWord>
		<KeyWord name="strip" func="yes">
			<Overload retVal="" descr="S.strip([chars]) -&gt; string or unicode&#x0a;&#x0a;Return a copy of the string S with leading and trailing&#x0a;whitespace removed.&#x0a;If chars is given and not None, remove characters in chars instead.&#x0a;If chars is unicode, S will be converted to unicode before stripping">
			</Overload>
		</KeyWord>
		<KeyWord name="sum" func="yes">
			<Overload retVal="" descr="sum(sequence[, start]) -&gt; value&#x0a;&#x0a;Returns the sum of a sequence of numbers (NOT strings) plus the value&#x0a;of parameter 'start' (which defaults to 0).  When the sequence is&#x0a;empty, returns start.">
			</Overload>
		</KeyWord>
		<KeyWord name="super" func="yes">
			<Overload retVal="" descr="super(type) -&gt; unbound super object&#x0a;super(type, obj) -&gt; bound super object; requires isinstance(obj, type)&#x0a;super(type, type2) -&gt; bound super object; requires issubclass(type2, type)&#x0a;Typical use to call a cooperative superclass method:&#x0a;class C(B):&#x0a;    def meth(self, arg):&#x0a;        super(C, self).meth(arg)">
			</Overload>
		</KeyWord>
		<KeyWord name="swapcase" func="yes">
			<Overload retVal="" descr="S.swapcase() -&gt; string&#x0a;&#x0a;Return a copy of the string S with uppercase characters&#x0a;converted to lowercase and vice versa.">
			</Overload>
		</KeyWord>
		<KeyWord name="symmetric_difference" func="yes">
			<Overload retVal="" descr="Return the symmetric difference of two sets as a new set.&#x0a;&#x0a;(i.e. all elements that are in exactly one of the sets.)">
			</Overload>
		</KeyWord>
		<KeyWord name="symmetric_difference_update" func="yes">
			<Overload retVal="" descr="Update a set with the symmetric difference of itself and another.">
			</Overload>
		</KeyWord>
		<KeyWord name="tell" func="yes">
			<Overload retVal="" descr="tell() -&gt; current file position, an integer (may be a long integer).">
			</Overload>
		</KeyWord>
		<KeyWord name="title" func="yes">
			<Overload retVal="" descr="S.title() -&gt; unicode&#x0a;&#x0a;Return a titlecased version of S, i.e. words start with title case&#x0a;characters, all remaining cased characters have lower case.">
			</Overload>
		</KeyWord>
		<KeyWord name="tobytes" />
		<KeyWord name="tolist" />
		<KeyWord name="translate" func="yes">
			<Overload retVal="" descr="B.translate(table[, deletechars]) -&gt; bytearray&#x0a;&#x0a;Return a copy of B, where all characters occurring in the&#x0a;optional argument deletechars are removed, and the remaining&#x0a;characters have been mapped through the given translation&#x0a;table, which must be a bytes object of length 256.">
			</Overload>
		</KeyWord>
		<KeyWord name="truncate" func="yes">
			<Overload retVal="" descr="truncate([size]) -&gt; None.  Truncate the file to at most size bytes.&#x0a;&#x0a;Size defaults to the current file position, as returned by tell().">
			</Overload>
		</KeyWord>
		<KeyWord name="try" />
		<KeyWord name="tuple" func="yes">
			<Overload retVal="" descr="tuple() -&gt; empty tuple&#x0a;tuple(iterable) -&gt; tuple initialized from iterable's items&#x0a;&#x0a;If the argument is a tuple, the return value is the same object.">
			</Overload>
		</KeyWord>
		<KeyWord name="type" func="yes">
			<Overload retVal="" descr="type(object) -&gt; the object's type&#x0a;type(name, bases, dict) -&gt; a new type">
			</Overload>
		</KeyWord>
		<KeyWord name="unichr" func="yes">
			<Overload retVal="" descr="unichr(i) -&gt; Unicode character&#x0a;&#x0a;Return a Unicode string of one character with ordinal i; 0 &lt;= i &lt;= 0x10ffff.">
			</Overload>
		</KeyWord>
		<KeyWord name="unicode" func="yes">
			<Overload retVal="" descr="unicode(string [, encoding[, errors]]) -&gt; object&#x0a;&#x0a;Create a new Unicode object from the given encoded string.&#x0a;encoding defaults to the current default string encoding.&#x0a;errors can be 'strict', 'replace' or 'ignore' and defaults to 'strict'.">
			</Overload>
		</KeyWord>
		<KeyWord name="union" func="yes">
			<Overload retVal="" descr="Return the union of sets as a new set.&#x0a;&#x0a;(i.e. all elements that are in either set.)">
			</Overload>
		</KeyWord>
		<KeyWord name="update" func="yes">
			<Overload retVal="" descr="D.update(E, **F) -&gt; None.  Update D from dict/iterable E and F.&#x0a;If E has a .keys() method, does:     for k in E: D[k] = E[k]&#x0a;If E lacks .keys() method, does:     for (k, v) in E: D[k] = v&#x0a;In either case, this is followed by: for k in F: D[k] = F[k]">
			</Overload>
		</KeyWord>
		<KeyWord name="upper" func="yes">
			<Overload retVal="" descr="S.upper() -&gt; unicode&#x0a;&#x0a;Return a copy of S converted to uppercase.">
			</Overload>
		</KeyWord>
		<KeyWord name="values" func="yes">
			<Overload retVal="" descr="D.values() -&gt; list of D's values">
			</Overload>
		</KeyWord>
		<KeyWord name="vars" func="yes">
			<Overload retVal="" descr="vars([object]) -&gt; dictionary&#x0a;&#x0a;Without arguments, equivalent to locals().&#x0a;With an argument, equivalent to object.__dict__.">
			</Overload>
		</KeyWord>
		<KeyWord name="viewitems" func="yes">
			<Overload retVal="" descr="D.viewitems() -&gt; a set-like object providing a view on D's items">
			</Overload>
		</KeyWord>
		<KeyWord name="viewkeys" func="yes">
			<Overload retVal="" descr="D.viewkeys() -&gt; a set-like object providing a view on D's keys">
			</Overload>
		</KeyWord>
		<KeyWord name="viewvalues" func="yes">
			<Overload retVal="" descr="D.viewvalues() -&gt; an object providing a view on D's values">
			</Overload>
		</KeyWord>
		<KeyWord name="while" />
		<KeyWord name="with" />
		<KeyWord name="write" func="yes">
			<Overload retVal="" descr="write(str) -&gt; None.  Write string str to file.&#x0a;&#x0a;Note that due to buffering, flush() or close() may be needed before&#x0a;the file on disk reflects the data written.">
			</Overload>
		</KeyWord>
		<KeyWord name="writelines" func="yes">
			<Overload retVal="" descr="writelines(sequence_of_strings) -&gt; None.  Write the strings to the file.&#x0a;&#x0a;Note that newlines are not added.  The sequence can be any iterable object&#x0a;producing strings. This is equivalent to calling write() for each string.">
			</Overload>
		</KeyWord>
		<KeyWord name="xrange" func="yes">
			<Overload retVal="" descr="xrange([start,] stop[, step]) -&gt; xrange object&#x0a;&#x0a;Like range(), but instead of returning a list, returns an object that&#x0a;generates the numbers in the range on demand.  For looping, this is &#x0a;slightly faster than range() and more memory efficient.">
			</Overload>
		</KeyWord>
		<KeyWord name="xreadlines" func="yes">
			<Overload retVal="" descr="xreadlines() -&gt; returns self.&#x0a;&#x0a;For backward compatibility. File objects now include the performance&#x0a;optimizations previously implemented in the xreadlines module.">
			</Overload>
		</KeyWord>
		<KeyWord name="yield" />
		<KeyWord name="zfill" func="yes">
			<Overload retVal="" descr="B.zfill(width) -&gt; copy of B&#x0a;&#x0a;Pad a numeric string B with zeros on the left, to fill a field&#x0a;of the specified width.  B is never truncated.">
			</Overload>
		</KeyWord>
		<KeyWord name="zip" func="yes">
			<Overload retVal="" descr="zip(seq1 [, seq2 [...]]) -&gt; [(seq1[0], seq2[0] ...), (...)]&#x0a;&#x0a;Return a list of tuples, where each tuple contains the i-th element&#x0a;from each of the argument sequences.  The returned list is truncated&#x0a;in length to the length of the shortest argument sequence.">
			</Overload>
		</KeyWord>
<!-- ================================== -->
<!-- PYTHON MANIM CE COMMUNITY COMMANDS -->
<!-- ================================== -->
		<KeyWord name="AnimatedBoundary" func="yes">
			<Overload retVal="" descr="AnimatedBoundary(vmobject, colors=['#29ABCA', '#9CDCEB', '#1C758A', '#736357'], max_stroke_width=3, cycle_rate=0.5, back_and_forth=True, draw_rate_func=<function smooth>, fade_rate_func=<function smooth>, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="TracedPath" func="yes">
			<Overload retVal="" descr="TracedPath(traced_point_func, stroke_width=2, stroke_color='#FFFFFF', min_distance_to_new_point=0.1, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="Axes" func="yes">
			<Overload retVal="" descr="Axes(x_min=None, x_max=None, y_min=None, y_max=None, axis_config=None, x_axis_config=None, y_axis_config=None, center_point=array([0.0, 0.0, 0.0]), **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="ComplexPlane" func="yes">
			<Overload retVal="" descr="ComplexPlane(color='#58C4DD', x_line_frequency=1, y_line_frequency=1, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="CoordinateSystem" func="yes">
			<Overload retVal="" descr="CoordinateSystem(x_min=None, x_max=None, y_min=None, y_max=None, dim=2)">
			</Overload>
		</KeyWord>
		<KeyWord name="NumberPlane" func="yes">
			<Overload retVal="" descr="NumberPlane(axis_config=None, y_axis_config=None, background_line_style=None, faded_line_style=None, x_line_frequency=1, y_line_frequency=1, faded_line_ratio=1, make_smooth_after_applying_functions=True, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="ThreeDAxes" func="yes">
			<Overload retVal="" descr="ThreeDAxes(x_min=- 5.5, x_max=5.5, y_min=- 5.5, y_max=5.5, z_min=- 3.5, z_max=3.5, z_axis_config=None, z_normal=array([0.0, - 1.0, 0.0]), num_axis_pieces=20, light_source=array([- 7.0, - 9.0, 10.0]), **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="FullScreenFadeRectangle" func="yes">
			<Overload retVal="" descr="FullScreenFadeRectangle(stroke_width=0, fill_color='#000000', fill_opacity=0.7, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="FullScreenRectangle" func="yes">
			<Overload retVal="" descr="FullScreenRectangle(**kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="PictureInPictureFrame" func="yes">
			<Overload retVal="" descr="PictureInPictureFrame(height=3, aspect_ratio=1.7777777777777777, **kwargs)">
			</Overload>
		</KeyWord>
       <KeyWord name="ScreenRectangle" func="yes">
			<Overload retVal="" descr="ScreenRectangle(aspect_ratio=1.7777777777777777, height=4, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="FunctionGraph" func="yes">
			<Overload retVal="" descr="FunctionGraph(function, x_min=None, x_max=None, color='#FFFF00', **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="ParametricFunction" func="yes">
			<Overload retVal="" descr="ParametricFunction(function=None, t_min=0, t_max=1, step_size=0.01, dt=1e-08, discontinuities=None, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="Angle" func="yes">
			<Overload retVal="" descr="Angle(line1, line2, radius=None, quadrant=1, 1, other_angle=False, dot=False, dot_radius=None, dot_distance=0.55, dot_color='#FFFFFF', elbow=False, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="AnnotationDot" func="yes">
			<Overload retVal="" descr="AnnotationDot(radius=0.10400000000000001, stroke_width=5, stroke_color='#FFFFFF', fill_color='#58C4DD', **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="AnnularSector" func="yes">
			<Overload retVal="" descr="AnnularSector(inner_radius=1, outer_radius=2, angle=1.5707963267948966, start_angle=0, fill_opacity=1, stroke_width=0, color='#FFFFFF', **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="Annulus" func="yes">
			<Overload retVal="" descr="Annulus(inner_radius=1, outer_radius=2, fill_opacity=1, stroke_width=0, color='#FFFFFF', mark_paths_closed=False, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="Arc" func="yes">
			<Overload retVal="" descr="Arc(start_angle=0, angle=1.5707963267948966, radius=1.0, num_components=9, anchors_span_full_range=True, arc_center=array([0.0, 0.0, 0.0]), **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="ArcBetweenPoints" func="yes">
			<Overload retVal="" descr="ArcBetweenPoints(start, end, angle=1.5707963267948966, radius=None, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="ArcPolygon" func="yes">
			<Overload retVal="" descr="ArcPolygon(*vertices, angle=0.7853981633974483, radius=None, arc_config=None, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="ArcPolygonFromArcs" func="yes">
			<Overload retVal="" descr="ArcPolygonFromArcs(*arcs, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="Arrow" func="yes">
			<Overload retVal="" descr="Arrow(*args, stroke_width=6, buff=0.25, max_tip_length_to_length_ratio=0.25, max_stroke_width_to_length_ratio=5, preserve_tip_size_when_scaling=True, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="ArrowCircleFilledTip" func="yes">
			<Overload retVal="" descr="ArrowCircleFilledTip(fill_opacity=1, stroke_width=0, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="ArrowCircleTip" func="yes">
			<Overload retVal="" descr="ArrowCircleTip(fill_opacity=0, stroke_width=3, length=0.35, start_angle=3.141592653589793, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="ArrowSquareFilledTip" func="yes">
			<Overload retVal="" descr="ArrowSquareFilledTip(fill_opacity=1, stroke_width=0, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="ArrowSquareTip" func="yes">
			<Overload retVal="" descr="ArrowSquareTip(fill_opacity=0, stroke_width=3, length=0.35, start_angle=3.141592653589793, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="ArrowTip" func="yes">
			<Overload retVal="" descr="ArrowTip(*args, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="ArrowTriangleFilledTip" func="yes">
			<Overload retVal="" descr="ArrowTriangleFilledTip(fill_opacity=1, stroke_width=0, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="ArrowTriangleTip" func="yes">
			<Overload retVal="" descr="ArrowTriangleTip(fill_opacity=0, stroke_width=3, length=0.35, start_angle=3.141592653589793, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="Circle" func="yes">
			<Overload retVal="" descr="Circle(color='#FC6255', close_new_points=True, anchors_span_full_range=False, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="CubicBezier" func="yes">
			<Overload retVal="" descr="CubicBezier(start_anchor, start_handle, end_handle, end_anchor, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="CurvedArrow" func="yes">
			<Overload retVal="" descr="CurvedArrow(start_point, end_point, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="CurvedDoubleArrow" func="yes">
			<Overload retVal="" descr="CurvedDoubleArrow(start_point, end_point, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="Cutout" func="yes">
			<Overload retVal="" descr="Cutout(main_shape, *mobjects, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="DashedLine" func="yes">
			<Overload retVal="" descr="DashedLine(*args, dash_length=0.05, dash_spacing=None, positive_space_ratio=0.5, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="Dot" func="yes">
			<Overload retVal="" descr="Dot(point=array([0.0, 0.0, 0.0]), radius=0.08, stroke_width=0, fill_opacity=1.0, color='#FFFFFF', **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="DoubleArrow" func="yes">
			<Overload retVal="" descr="DoubleArrow(*args, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="Elbow" func="yes">
			<Overload retVal="" descr="Elbow(width=0.2, angle=0, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="Ellipse" func="yes">
			<Overload retVal="" descr="Ellipse(width=2, height=1, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="LabeledDot" func="yes">
			<Overload retVal="" descr="LabeledDot(label, radius=None, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="Line" func="yes">
			<Overload retVal="" descr="Line(start=array([- 1.0, 0.0, 0.0]), end=array([1.0, 0.0, 0.0]), buff=0, path_arc=None, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="Polygon" func="yes">
			<Overload retVal="" descr="Polygon(*vertices, color='#58C4DD', **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="Rectangle" func="yes">
			<Overload retVal="" descr="Rectangle(color='#FFFFFF', height=2.0, width=4.0, mark_paths_closed=True, close_new_points=True, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="RegularPolygon" func="yes">
			<Overload retVal="" descr="RegularPolygon(n=6, start_angle=None, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="RightAngle" func="yes">
			<Overload retVal="" descr="RightAngle(line1, line2, length=None, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="RoundedRectangle" func="yes">
			<Overload retVal="" descr="RoundedRectangle(corner_radius=0.5, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="Sector" func="yes">
			<Overload retVal="" descr="Sector(outer_radius=1, inner_radius=0, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="SmallDot" func="yes">
			<Overload retVal="" descr="SmallDot(radius=0.04, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="Square" func="yes">
			<Overload retVal="" descr="Square(side_length=2.0, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="TangentLine" func="yes">
			<Overload retVal="" descr="TangentLine(vmob, alpha, length=1, d_alpha=1e-06, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="TipableVMobject" func="yes">
			<Overload retVal="" descr="TipableVMobject(tip_length=0.35, normal_vector=array([0.0, 0.0, 1.0]), tip_style={}, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="Triangle" func="yes">
			<Overload retVal="" descr="Triangle(**kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="Vector" func="yes">
			<Overload retVal="" descr="Vector(direction=array([1.0, 0.0, 0.0]), buff=0, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="Graph" func="yes">
			<Overload retVal="" descr="Graph(vertices, edges, labels=False, label_fill_color='#000000', layout='spring', layout_scale=2, layout_config=None, vertex_type=<class 'manim.mobject.geometry.Dot'>, vertex_config=None, edge_type=<class 'manim.mobject.geometry.Line'>, partitions=None, root_vertex=None, edge_config=None)">
			</Overload>
		</KeyWord>
		<KeyWord name="ManimBanner" func="yes">
			<Overload retVal="" descr="ManimBanner(dark_theme=True)">
			</Overload>
		</KeyWord>
		<KeyWord name="DecimalMatrix" func="yes">
			<Overload retVal="" descr="DecimalMatrix(matrix, element_to_mobject=<class 'manim.mobject.numbers.DecimalNumber'>, element_to_mobject_config={'num_decimal_places': 1}, **kwargs)" >
			</Overload>
		</KeyWord>
		<KeyWord name="IntegerMatrix" func="yes">
			<Overload retVal="" descr="IntegerMatrix(matrix, element_to_mobject=<class 'manim.mobject.numbers.Integer'>, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="Matrix" func="yes">
			<Overload retVal="" descr="Matrix(matrix, v_buff=0.8, h_buff=1.3, bracket_h_buff=0.25, bracket_v_buff=0.25, add_background_rectangles_to_entries=False, include_background_rectangle=False, element_to_mobject=<class 'manim.mobject.svg.tex_mobject.MathTex'>, element_to_mobject_config={}, element_alignment_corner=array([ 1., -1., 0.]), left_bracket='\\big[', right_bracket='\\big]', **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="MobjectMatrix" func="yes">
			<Overload retVal="" descr="MobjectMatrix(matrix, element_to_mobject=<function MobjectMatrix.<lambda>>, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="Group" func="yes">
			<Overload retVal="" descr="Group(*mobjects, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="Mobject" func="yes">
			<Overload retVal="" descr="Mobject(color='#FFFFFF', name=None, dim=3, target=None, z_index=0, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="NumberLine" func="yes">
			<Overload retVal="" descr="NumberLine(color='#BBBBBB', unit_size=1, width=None, rotation=0, include_ticks=True, tick_size=0.1, tick_frequency=1, leftmost_tick=None, numbers_with_elongated_ticks=[0], include_numbers=False, numbers_to_show=None, longer_tick_multiple=2, number_at_center=0, number_scale_val=0.75, label_direction=array([0.0, - 1.0, 0.0]), line_to_number_buff=0.25, include_tip=False, tip_width=0.25, tip_height=0.25, add_start=0, add_end=0, decimal_number_config={'num_decimal_places': 0}, exclude_zero_from_default_numbers=False, x_min=- 7.111111111111111, x_max=7.111111111111111, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="UnitInterval" func="yes">
			<Overload retVal="" descr="UnitInterval(unit_size=6, tick_frequency=0.1, numbers_with_elongated_ticks=[0, 1], number_at_center=0.5, decimal_number_config={'num_decimal_places': 1}, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="DecimalNumber" func="yes">
			<Overload retVal="" descr="DecimalNumber(number=0, num_decimal_places=2, include_sign=False, group_with_commas=True, digit_to_digit_buff=0.05, show_ellipsis=False, unit=None, include_background_rectangle=False, edge_to_fix=array([- 1.0, 0.0, 0.0]), **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="Integer" func="yes">
			<Overload retVal="" descr="Integer(number=0, num_decimal_places=0, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="Variable" func="yes">
			<Overload retVal="" descr="Variable(var, label, var_type=<class 'manim.mobject.numbers.DecimalNumber'>, num_decimal_places=2, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="BarChart" func="yes">
			<Overload retVal="" descr="BarChart(values, height=4, width=6, n_ticks=4, tick_width=0.2, label_y_axis=True, y_axis_label_height=0.25, max_value=1, bar_colors=['#58C4DD', '#FFFF00'], bar_fill_opacity=0.8, bar_stroke_width=3, bar_names=[], bar_label_scale_val=0.75, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="SampleSpace" func="yes">
			<Overload retVal="" descr="SampleSpace(height=3, width=3, fill_color='#444444', fill_opacity=1, stroke_width=0.5, stroke_color='#BBBBBB', default_label_scale_val=1)">
			</Overload>
		</KeyWord>
		<KeyWord name="BackgroundRectangle" func="yes">
			<Overload retVal="" descr="BackgroundRectangle(mobject, color='#000000', stroke_width=0, stroke_opacity=0, fill_opacity=0.75, buff=0, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="Cross" func="yes">
			<Overload retVal="" descr="Cross(mobject, stroke_color='#FC6255', stroke_width=6, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="SurroundingRectangle" func="yes">
			<Overload retVal="" descr="SurroundingRectangle(mobject, color='#FFFF00', buff=0.1, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="Underline" func="yes">
			<Overload retVal="" descr="Underline(mobject, buff=0.1, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="Arrow3D" func="yes">
			<Overload retVal="" descr="Arrow3D(start=array([- 1.0, 0.0, 0.0]), end=array([1.0, 0.0, 0.0]), thickness=0.02, height=0.5, base_radius=0.25, color='#FFFFFF', **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="Cone" func="yes">
			<Overload retVal="" descr="Cone(base_radius=1, height=1, direction=array([0.0, 0.0, 1.0]), show_base=False, v_min=0, v_max=6.283185307179586, u_min=0, checkerboard_colors=False, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="Cube" func="yes">
			<Overload retVal="" descr="Cube(side_length=2, fill_opacity=0.75, fill_color='#58C4DD', stroke_width=0, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="Cylinder" func="yes">
			<Overload retVal="" descr="Cylinder(radius=1, height=2, direction=array([0.0, 0.0, 1.0]), v_min=0, v_max=6.283185307179586, show_ends=True, resolution=24, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="Dot3D" func="yes">
			<Overload retVal="" descr="Dot3D(radius=0.08, color='#FFFFFF', **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="Line3D" func="yes">
			<Overload retVal="" descr="Line3D(start=array([- 1.0, 0.0, 0.0]), end=array([1.0, 0.0, 0.0]), thickness=0.02, color=None, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="ParametricSurface" func="yes">
			<Overload retVal="" descr="ParametricSurface(func, u_min=0, u_max=1, v_min=0, v_max=1, resolution=32, surface_piece_config={}, fill_color='#29ABCA', fill_opacity=1.0, checkerboard_colors=['#29ABCA', '#1C758A'], stroke_color='#BBBBBB', stroke_width=0.5, should_make_jagged=False, pre_function_handle_to_anchor_scale_factor=1e-05, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="Prism" func="yes">
			<Overload retVal="" descr="Prism(dimensions=[3, 2, 1], **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="Sphere" func="yes">
			<Overload retVal="" descr="Sphere(radius=1, resolution=12, 24, u_min=0.001, u_max=3.1405926535897932, v_min=0, v_max=6.283185307179586, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="ThreeDVMobject" func="yes">
			<Overload retVal="" descr="ThreeDVMobject(shade_in_3d=True, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="Torus" func="yes">
			<Overload retVal="" descr="Torus(major_radius=3, minor_radius=1, u_min=0, u_max=6.283185307179586, v_min=0, v_max=6.283185307179586, resolution=24, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="ComplexValueTracker" func="yes">
			<Overload retVal="" descr="ComplexValueTracker(value=0, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="ExponentialValueTracker" func="yes">
			<Overload retVal="" descr="ExponentialValueTracker(value=0, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="ValueTracker" func="yes">
			<Overload retVal="" descr="ValueTracker(value=0, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="AnimatedStreamLines" func="yes">
			<Overload retVal="" descr="AnimatedStreamLines(stream_lines, lag_range=4, line_anim_class=<class 'manim.animation.indication.ShowPassingFlash'>, line_anim_config={'rate_func': <function linear>, 'run_time': 4, 'time_width': 0.3}, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="ShowPassingFlashWithThinningStrokeWidth" func="yes">
			<Overload retVal="" descr="ShowPassingFlashWithThinningStrokeWidth(vmobject, n_segments=10, time_width=0.1, remover=True, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="StreamLines" func="yes">
			<Overload retVal="" descr="StreamLines(func, start_points_generator_config={}, x_min=- 8, x_max=8, y_min=- 5, y_max=5, delta_x=0.5, delta_y=0.5, n_repeats=1, noise_factor=None, dt=0.05, virtual_time=3, n_anchors_per_line=100, stroke_width=1, stroke_color='#FFFFFF', color_by_arc_length=True, min_arc_length=0, max_arc_length=12, color_by_magnitude=False, min_magnitude=0.5, max_magnitude=1.5, colors=['#1C758A', '#83C167', '#FFFF00', '#FC6255'], cutoff_norm=15, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="VectorField" func="yes">
			<Overload retVal="" descr="VectorField(func, delta_x=0.5, delta_y=0.5, min_magnitude=0, max_magnitude=2, colors=['#1C758A', '#83C167', '#FFFF00', '#FC6255'], length_func=<function VectorField.<lambda>>, opacity=1.0, vector_config=None, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="Brace" func="yes">
			<Overload retVal="" descr="Brace(mobject, direction=array([0.0, - 1.0, 0.0]), buff=0.2, width_multiplier=2, max_num_quads=15, min_num_quads=0, background_stroke_width=0, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="BraceBetweenPoints" func="yes">
			<Overload retVal="" descr="BraceBetweenPoints(point_1, point_2, direction=array([0.0, 0.0, 0.0]), **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="BraceLabel" func="yes">
			<Overload retVal="" descr="BraceLabel(obj, text, brace_direction=array([ 0., -1., 0.]), label_constructor=<class 'manim.mobject.svg.tex_mobject.MathTex'>, label_scale=1, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="BraceText" func="yes">
			<Overload retVal="" descr="BraceText(obj, text, label_constructor=<class 'manim.mobject.svg.tex_mobject.Tex'>, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="Code" func="yes">
			<Overload retVal="" descr="Code(file_name=None, code=None, tab_width=3, line_spacing=0.3, scale_factor=0.5, font='Monospac821 BT', stroke_width=0, margin=0.3, indentation_chars=' ', background='rectangle', background_stroke_width=1, background_stroke_color='#FFFFFF', corner_radius=0.2, insert_line_no=True, line_no_from=1, line_no_buff=0.4, style='vim', language=None, generate_html_file=False, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="SVGPathMobject" func="yes">
			<Overload retVal="" descr="SVGPathMobject(path_string, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="VMobjectFromSVGPathstring" func="yes">
			<Overload retVal="" descr="VMobjectFromSVGPathstring(*args, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="SVGMobject" func="yes">
			<Overload retVal="" descr="SVGMobject(file_name=None, should_center=True, height=2, width=None, unpack_groups=True, stroke_width=4, fill_opacity=1.0, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="AbstractImageMobject" func="yes">
			<Overload retVal="" descr="AbstractImageMobject(scale_to_resolution, pixel_array_dtype='uint8', **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="ImageMobject" func="yes">
			<Overload retVal="" descr="ImageMobject(filename_or_array, scale_to_resolution=1080, invert=False, image_mode='RGBA', **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="ImageMobjectFromCamera" func="yes">
			<Overload retVal="" descr="ImageMobjectFromCamera(camera, default_display_frame_config=None, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="Mobject1D" func="yes">
			<Overload retVal="" descr="Mobject1D(density=10, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="Mobject2D" func="yes">
			<Overload retVal="" descr="Mobject2D(density=25, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="PGroup" func="yes">
			<Overload retVal="" descr="PGroup(*pmobs, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="PMobject" func="yes">
			<Overload retVal="" descr="PMobject(stroke_width=4, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="Point" func="yes">
			<Overload retVal="" descr="Point(location=array([0.0, 0.0, 0.0]), color='#000000', **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="PointCloudDot" func="yes">
			<Overload retVal="" descr="PointCloudDot(center=array([0.0, 0.0, 0.0]), radius=2.0, stroke_width=2, density=10, color='#FFFF00', **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="CurvesAsSubmobjects" func="yes">
			<Overload retVal="" descr="CurvesAsSubmobjects(vmobject, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="DashedVMobject" func="yes">
			<Overload retVal="" descr="DashedVMobject(vmobject, num_dashes=15, positive_space_ratio=0.5, color='#FFFFFF', **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="VDict" func="yes">
			<Overload retVal="" descr="VDict(mapping_or_iterable={}, show_keys=False, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="VGroup" func="yes">
			<Overload retVal="" descr="VGroup(*vmobjects, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="VMobject" func="yes">
			<Overload retVal="" descr="VMobject(fill_color=None, fill_opacity=0.0, stroke_color=None, stroke_opacity=1.0, stroke_width=4, background_stroke_color='#000000', background_stroke_opacity=1.0, background_stroke_width=0, sheen_factor=0.0, sheen_direction=array([- 1.0, 1.0, 0.0]), close_new_points=False, pre_function_handle_to_anchor_scale_factor=0.01, make_smooth_after_applying_functions=False, background_image_file=None, shade_in_3d=False, tolerance_for_point_equality=1e-06, n_points_per_cubic_curve=4, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="VectorizedPoint" func="yes">
			<Overload retVal="" descr="VectorizedPoint(location=array([0.0, 0.0, 0.0]), color='#000000', fill_opacity=0, stroke_width=0, artificial_width=0.01, artificial_height=0.01, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="SceneFileWriter" func="yes">
			<Overload retVal="" descr="SceneFileWriter(renderer, scene_name, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="SpecialThreeDScene" func="yes">
			<Overload retVal="" descr="SpecialThreeDScene(cut_axes_at_radius=True, camera_config={'exponential_projection': True, 'should_apply_shading': True}, three_d_axes_config={'axis_config': {'numbers_with_elongated_ticks': [0, 1, 2], 'stroke_width': 2, 'tick_frequency': 1, 'unit_size': 2}, 'num_axis_pieces': 1}, sphere_config={'radius': 2, 'resolution': 24, 48}, default_angled_camera_position={'phi': 1.2217304763960306, 'theta': - 1.9198621771937625}, low_quality_config={'camera_config': {'should_apply_shading': False}, 'sphere_config': {'resolution': 12, 24}, 'three_d_axes_config': {'num_axis_pieces': 1}}, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="ThreeDScene" func="yes">
			<Overload retVal="" descr="ThreeDScene(camera_class=<class 'manim.camera.three_d_camera.ThreeDCamera'>, ambient_camera_rotation=None, default_angled_camera_orientation_kwargs=None, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="LinearTransformationScene" func="yes">
			<Overload retVal="" descr="LinearTransformationScene(include_background_plane=True, include_foreground_plane=True, background_plane_kwargs={'axis_config': {'color': '#888888'}, 'background_line_style': {'stroke_color': '#888888', 'stroke_width': 1}, 'color': '#888888'}, show_coordinates=False, show_basis_vectors=True, basis_vector_stroke_width=6, i_hat_color='#83C167', j_hat_color='#FC6255', leave_ghost_vectors=False, t_matrix=[[3, 0], [1, 2]], **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="VectorScene" func="yes">
			<Overload retVal="" descr="VectorScene(basis_vector_stroke_width=6, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="ZoomedScene" func="yes">
			<Overload retVal="" descr="ZoomedScene(camera_class=<class 'manim.camera.multi_camera.MultiCamera'>, zoomed_display_height=3, zoomed_display_width=3, zoomed_display_center=None, zoomed_display_corner=array([1., 1., 0.]), zoomed_display_corner_buff=0.5, zoomed_camera_config={'background_opacity': 1, 'default_frame_stroke_width': 2}, zoomed_camera_image_mobject_config={}, zoomed_camera_frame_starting_position=array([0., 0., 0.]), zoom_factor=0.15, image_frame_stroke_width=3, zoom_activated=False, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="GraphScene" func="yes">
			<Overload retVal="" descr="GraphScene(x_min=- 1, x_max=10, x_axis_width=9, x_leftmost_tick=None, x_labeled_nums=None, x_axis_label='$x$', y_min=- 1, y_max=10, y_axis_height=6, y_bottom_tick=None, y_labeled_nums=None, y_axis_label='$y$', axes_color='#888888', graph_origin=array([- 4.0, - 2.5, 0.0]), exclude_zero_label=True, default_graph_colors=['#58C4DD', '#83C167', '#FFFF00'], default_derivative_color='#83C167', default_input_color='#FFFF00', default_riemann_start_color='#58C4DD', default_riemann_end_color='#83C167', area_opacity=0.8, num_rects=50, include_tip=False, x_axis_visibility=True, y_axis_visibility=True, x_label_position=array([1.0, 1.0, 0.0]), y_label_position=array([1.0, 1.0, 0.0]), x_axis_config=None, y_axis_config=None, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="MovingCameraScene" func="yes">
			<Overload retVal="" descr="MovingCameraScene(camera_class=<class 'manim.camera.moving_camera.MovingCamera'>, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="ReconfigurableScene" func="yes">
			<Overload retVal="" descr="ReconfigurableScene(allow_recursion=True, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="SampleSpaceScene" func="yes">
			<Overload retVal="" descr="SampleSpaceScene(renderer=None, camera_class=<class 'manim.camera.camera.Camera'>, always_update_mobjects=False, random_seed=0, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="Scene" func="yes">
			<Overload retVal="" descr="Scene(renderer=None, camera_class=<class 'manim.camera.camera.Camera'>, always_update_mobjects=False, random_seed=0, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="Animation" func="yes">
			<Overload retVal="" descr="Animation(mobject, lag_ratio=0.0, run_time=1.0, rate_func=<function smooth>, name=None, remover=False, suspend_mobject_updating=True, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="Wait" func="yes">
			<Overload retVal="" descr="Wait(duration=1, stop_condition=None, **kwargs)" >
			</Overload>
		</KeyWord>
		<KeyWord name="AnimationGroup" func="yes">
			<Overload retVal="" descr="AnimationGroup(*animations, group=None, run_time=None, rate_func=<function linear>, lag_ratio=0, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="LaggedStart" func="yes">
			<Overload retVal="" descr="LaggedStart(*animations, lag_ratio=0.05, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="LaggedStartMap" func="yes">
			<Overload retVal="" descr="LaggedStartMap(AnimationClass, mobject, arg_creator=None, run_time=2, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="Succession" func="yes">
			<Overload retVal="" descr="Succession(*animations, lag_ratio=1, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="AddTextLetterByLetter" func="yes">
			<Overload retVal="" descr="AddTextLetterByLetter(text, suspend_mobject_updating=False, int_func=<ufunc 'ceil'>, rate_func=<function linear>, time_per_char=0.1, run_time=None, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="AddTextWordByWord" func="yes">
			<Overload retVal="" descr="AddTextWordByWord(text_mobject, run_time=None, time_per_char=0.06, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="Create" func="yes">
			<Overload retVal="" descr="Create(mobject, lag_ratio=1.0, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="DrawBorderThenFill" func="yes">
			<Overload retVal="" descr="DrawBorderThenFill(vmobject, run_time=2, rate_func=<function double_smooth>, stroke_width=2, stroke_color=None, draw_border_animation_config={}, fill_animation_config={}, **kwargs)" >
			</Overload>
		</KeyWord>
		<KeyWord name="ShowCreation" func="yes">
			<Overload retVal="" descr="ShowCreation(mobject, lag_ratio=1.0, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="ShowIncreasingSubsets" func="yes">
			<Overload retVal="" descr="ShowIncreasingSubsets(group, suspend_mobject_updating=False, int_func=<ufunc 'floor'>, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="ShowPartial" func="yes">
			<Overload retVal="" descr="ShowPartial(mobject, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="ShowSubmobjectsOneByOne" func="yes">
			<Overload retVal="" descr="ShowSubmobjectsOneByOne(group, int_func=<ufunc 'ceil'>, **kwargs) ">
			</Overload>
		</KeyWord>
		<KeyWord name="Uncreate" func="yes">
			<Overload retVal="" descr="Uncreate(mobject, rate_func=<function Uncreate.<lambda>>, remover=True, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="Unwrite" func="yes">
			<Overload retVal="" descr="Unwrite(vmobject, run_time=None, lag_ratio=None, rate_func=<function linear>, reverse=False, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="Write" func="yes">
			<Overload retVal="" descr="Write(vmobject, run_time=None, lag_ratio=None, rate_func=<function linear>, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="FadeIn" func="yes">
			<Overload retVal="" descr="FadeIn(vmobject, lag_ratio=0, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="FadeInFrom" func="yes">
			<Overload retVal="" descr="FadeInFrom(mobject, direction=array([0.0, - 1.0, 0.0]), **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="FadeInFromLarge" func="yes">
			<Overload retVal="" descr="FadeInFromLarge(mobject, scale_factor=2, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="FadeInFromPoint" func="yes">
			<Overload retVal="" descr="FadeInFromPoint(mobject, point, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="FadeOut" func="yes">
			<Overload retVal="" descr="FadeOut(vmobject, remover=True, lag_ratio=0, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="FadeOutAndShift" func="yes">
			<Overload retVal="" descr="FadeOutAndShift(mobject, direction=array([0.0, - 1.0, 0.0]), **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="FadeOutToPoint" func="yes">
			<Overload retVal="" descr="FadeOutToPoint(mobject, point=array([0.0, 0.0, 0.0]), **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="VFadeIn" func="yes">
			<Overload retVal="" descr="VFadeIn(mobject, suspend_mobject_updating=False, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="VFadeInThenOut" func="yes">
			<Overload retVal="" descr="VFadeInThenOut(mobject, remover=True, rate_func=<function there_and_back>, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="VFadeOut" func="yes">
			<Overload retVal="" descr="VFadeOut(mobject, remover=True, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="GrowArrow" func="yes">
			<Overload retVal="" descr="GrowArrow(arrow, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="GrowFromCenter" func="yes">
			<Overload retVal="" descr="GrowFromCenter(mobject, point_color=None, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="GrowFromEdge" func="yes">
			<Overload retVal="" descr="GrowFromEdge(mobject, edge, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="GrowFromPoint" func="yes">
			<Overload retVal="" descr="GrowFromPoint(mobject, point, point_color=None, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="SpinInFromNothing" func="yes">
			<Overload retVal="" descr="SpinInFromNothing(mobject, path_arc=3.141592653589793, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="AnimationOnSurroundingRectangle" func="yes">
			<Overload retVal="" descr="AnimationOnSurroundingRectangle(mobject, rect_animation=<class 'manim.animation.animation.Animation'>, surrounding_rectangle_config={}, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="ApplyWave" func="yes">
			<Overload retVal="" descr="ApplyWave(mobject, direction=array([0.0, 1.0, 0.0]), amplitude=0.2, run_time=1, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="CircleIndicate" func="yes">
			<Overload retVal="" descr="CircleIndicate(mobject, circle_config={'color': '#FFFF00'}, rate_func=<function there_and_back>, remover=True, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="Flash" func="yes">
			<Overload retVal="" descr="Flash(point, line_length=0.2, num_lines=12, flash_radius=0.3, line_stroke_width=3, color='#FFFF00', run_time=1.0, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="FocusOn" func="yes">
			<Overload retVal="" descr="FocusOn(focus_point, opacity=0.2, color='#888888', run_time=2, remover=True, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="Indicate" func="yes">
			<Overload retVal="" descr="Indicate(mobject, scale_factor=1.2, color='#FFFF00', rate_func=<function there_and_back>, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="ShowCreationThenDestruction" func="yes">
			<Overload retVal="" descr="ShowCreationThenDestruction(mobject, time_width=2.0, run_time=1, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="ShowCreationThenDestructionAround" func="yes">
			<Overload retVal="" descr="ShowCreationThenDestructionAround(mobject, rect_animation=<class 'manim.animation.indication.ShowCreationThenDestruction'>, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="ShowCreationThenFadeAround" func="yes">
			<Overload retVal="" descr="ShowCreationThenFadeAround(mobject, rect_animation=<class 'manim.animation.indication.ShowCreationThenFadeOut'>, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="ShowCreationThenFadeOut" func="yes">
			<Overload retVal="" descr="ShowCreationThenFadeOut(mobject, remover=True, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="ShowPassingFlash" func="yes">
			<Overload retVal="" descr="ShowPassingFlash(mobject, time_width=0.1, remover=True, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="ShowPassingFlashAround" func="yes">
			<Overload retVal="" descr="ShowPassingFlashAround(mobject, rect_animation=<class 'manim.animation.indication.ShowPassingFlash'>, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="TurnInsideOut" func="yes">
			<Overload retVal="" descr="TurnInsideOut(mobject, path_arc=1.5707963267948966, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="WiggleOutThenIn" func="yes">
			<Overload retVal="" descr="WiggleOutThenIn(mobject, scale_value=1.1, rotation_angle=0.06283185307179587, n_wiggles=6, scale_about_point=None, rotate_about_point=None, run_time=2, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="ComplexHomotopy" func="yes">
			<Overload retVal="" descr="ComplexHomotopy(complex_homotopy, mobject, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="Homotopy" func="yes">
			<Overload retVal="" descr="Homotopy(homotopy, mobject, run_time=3, apply_function_kwargs=None, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="MoveAlongPath" func="yes">
			<Overload retVal="" descr="MoveAlongPath(mobject, path, suspend_mobject_updating=False, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="PhaseFlow" func="yes">
			<Overload retVal="" descr="PhaseFlow(function, mobject, virtual_time=1, suspend_mobject_updating=False, rate_func=<function linear>, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="SmoothedVectorizedHomotopy" func="yes">
			<Overload retVal="" descr="SmoothedVectorizedHomotopy(homotopy, mobject, run_time=3, apply_function_kwargs=None, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="ChangeDecimalToValue" func="yes">
			<Overload retVal="" descr="ChangeDecimalToValue(decimal_mob, target_number, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="ChangingDecimal" func="yes">
			<Overload retVal="" descr="ChangingDecimal(decimal_mob, number_update_func, suspend_mobject_updating=False, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="Rotate" func="yes">
			<Overload retVal="" descr="Rotate(mobject, angle=3.141592653589793, axis=array([0.0, 0.0, 1.0]), about_point=None, about_edge=None, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="Rotating" func="yes">
			<Overload retVal="" descr="Rotating(mobject, axis=array([0., 0., 1.]), radians=6.283185307179586, about_point=None, about_edge=None, run_time=5, rate_func=<function linear>, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="ApplyComplexFunction" func="yes">
			<Overload retVal="" descr="ApplyComplexFunction(function, mobject, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="ApplyFunction" func="yes">
			<Overload retVal="" descr="ApplyFunction(function, mobject, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="ApplyMatrix" func="yes">
			<Overload retVal="" descr="ApplyMatrix(matrix, mobject, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="ApplyMethod" func="yes">
			<Overload retVal="" descr="ApplyMethod(method, *args, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="ApplyPointwiseFunction" func="yes">
			<Overload retVal="" descr="ApplyPointwiseFunction(function, mobject, run_time=3.0, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="ApplyPointwiseFunctionToCenter" func="yes">
			<Overload retVal="" descr="ApplyPointwiseFunctionToCenter(function, mobject, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="ClockwiseTransform" func="yes">
			<Overload retVal="" descr="ClockwiseTransform(mobject, target_mobject, path_arc=- 3.141592653589793, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="CounterclockwiseTransform" func="yes">
			<Overload retVal="" descr="CounterclockwiseTransform(mobject, target_mobject, path_arc=3.141592653589793, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="CyclicReplace" func="yes">
			<Overload retVal="" descr="CyclicReplace(*mobjects, path_arc=1.5707963267948966, **kwargs)">
			</Overload>
		</KeyWord>	
		<KeyWord name="FadeToColor" func="yes">
			<Overload retVal="" descr="FadeToColor(mobject, color, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="FadeTransform" func="yes">
			<Overload retVal="" descr="FadeTransform(mobject, target_mobject, stretch=True, dim_to_match=1, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="FadeTransformPieces" func="yes">
			<Overload retVal="" descr="FadeTransformPieces(mobject, target_mobject, stretch=True, dim_to_match=1, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="MoveToTarget" func="yes">
			<Overload retVal="" descr="MoveToTarget(mobject, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="ReplacementTransform" func="yes">
			<Overload retVal="" descr="ReplacementTransform(mobject, target_mobject, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="Restore" func="yes">
			<Overload retVal="" descr="Restore(mobject, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="ScaleInPlace" func="yes">
			<Overload retVal="" descr="ScaleInPlace(mobject, scale_factor, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="ShrinkToCenter" func="yes">
			<Overload retVal="" descr="ShrinkToCenter(mobject, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="Swap" func="yes">
			<Overload retVal="" descr="Swap(*mobjects, path_arc=1.5707963267948966, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="Transform" func="yes">
			<Overload retVal="" descr="Transform(mobject, target_mobject=None, path_func=None, path_arc=0, path_arc_axis=array([0.0, 0.0, 1.0]), replace_mobject_with_target_in_scene=False, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="TransformAnimations" func="yes">
			<Overload retVal="" descr="TransformAnimations(start_anim, end_anim, rate_func=<function squish_rate_func.<locals>.result>, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="TransformFromCopy" func="yes">
			<Overload retVal="" descr="TransformFromCopy(mobject, target_mobject, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="TransformMatchingAbstractBase" func="yes">
			<Overload retVal="" descr="TransformMatchingAbstractBase(mobject, target_mobject, transform_mismatches=False, fade_transform_mismatches=False, key_map=None, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="TransformMatchingShapes" func="yes">
			<Overload retVal="" descr="TransformMatchingShapes(mobject, target_mobject, transform_mismatches=False, fade_transform_mismatches=False, key_map=None, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="TransformMatchingTex" func="yes">
			<Overload retVal="" descr="TransformMatchingTex(mobject, target_mobject, transform_mismatches=False, fade_transform_mismatches=False, key_map=None, **kwargs)">
			</Overload>
		</KeyWord>	
		<KeyWord name="MaintainPositionRelativeTo" func="yes">
			<Overload retVal="" descr="MaintainPositionRelativeTo(mobject, tracked_mobject, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="UpdateFromAlphaFunc" func="yes">
			<Overload retVal="" descr="UpdateFromAlphaFunc(mobject, update_function, suspend_mobject_updating=False, **kwargs)">
			</Overload>
		</KeyWord>
		<KeyWord name="UpdateFromFunc" func="yes">
			<Overload retVal="" descr="UpdateFromFunc(mobject, update_function, suspend_mobject_updating=False, **kwargs)">
			</Overload>
		</KeyWord>	


<!-- ================================== -->
<!-- PYTHON MANIM CE COMMUNITY COMMANDS -->
<!-- PYTHON MANIM CE CONSTANTS COMMANDS -->
<!-- ================================== -->
		<KeyWord name="ORIGIN" />
		<KeyWord name="UP" />
		<KeyWord name="DOWN" />
		<KeyWord name="RIGHT" />
		<KeyWord name="LEFT" />
		<KeyWord name="IN" />
		<KeyWord name="OUT" />
		<KeyWord name="UL" />
		<KeyWord name="UR" />
		<KeyWord name="DL" />
		<KeyWord name="DR" />
		<KeyWord name="PI" />
		<KeyWord name="TAU" />
		<KeyWord name="DEGREES" />
	    <KeyWord name="DARK_BLUE" />
		<KeyWord name="DARK_BROWN" />
		<KeyWord name="LIGHT_BROWN" />
		<KeyWord name="BLUE_E" />
		<KeyWord name="BLUE_D" />
		<KeyWord name="BLUE_C" />
		<KeyWord name="BLUE_B" />
		<KeyWord name="BLUE_A" />
		<KeyWord name="TEAL_E" />
		<KeyWord name="TEAL_D" />
		<KeyWord name="TEAL_C" />
		<KeyWord name="TEAL_B" />
		<KeyWord name="TEAL_A" />
		<KeyWord name="GREEN_E" />
		<KeyWord name="GREEN_D" />
		<KeyWord name="GREEN_C" />
		<KeyWord name="GREEN_B" />
		<KeyWord name="GREEN_A" />
		<KeyWord name="YELLOW_E" />
		<KeyWord name="YELLOW_D" />
		<KeyWord name="YELLOW_C" />
		<KeyWord name="YELLOW_B" />
		<KeyWord name="YELLOW_A" />
		<KeyWord name="GOLD_E" />
		<KeyWord name="GOLD_D" />
		<KeyWord name="GOLD_C" />
		<KeyWord name="GOLD_B" />
		<KeyWord name="GOLD_A" />
		<KeyWord name="RED_E" />
		<KeyWord name="RED_D" />
		<KeyWord name="RED_C" />
		<KeyWord name="RED_B" />
		<KeyWord name="RED_A" />
		<KeyWord name="MAROON_E" />
		<KeyWord name="MAROON_D" />
		<KeyWord name="MAROON_C" />
		<KeyWord name="MAROON_B" />
		<KeyWord name="MAROON_A" />
		<KeyWord name="PURPLE_E" />
		<KeyWord name="PURPLE_D" />
		<KeyWord name="PURPLE_C" />
		<KeyWord name="PURPLE_B" />
		<KeyWord name="PURPLE_A" />
		<KeyWord name="WHITE" />
		<KeyWord name="BLACK" />
		<KeyWord name="LIGHT_GRAY" />
		<KeyWord name="LIGHT_GREY" />
		<KeyWord name="GRAY" />
		<KeyWord name="GREY" />
		<KeyWord name="DARK_GREY" />
		<KeyWord name="DARK_GRAY" />
		<KeyWord name="DARKER_GREY" />
		<KeyWord name="DARKER_GRAY" />
		<KeyWord name="GREY_BROWN" />
		<KeyWord name="PINK" />
		<KeyWord name="LIGHT_PINK" />
		<KeyWord name="GREEN_SCREEN" />
		<KeyWord name="ORANGE" />

	</AutoComplete>
</NotepadPlus>